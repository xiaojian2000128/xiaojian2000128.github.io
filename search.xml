<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker的使用</title>
    <url>/2021/03/22/%E5%B7%A5%E5%85%B7/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Docker的概述"><a href="#Docker的概述" class="headerlink" title="Docker的概述"></a>Docker的概述</h2><p>Docker:把应用和环境(镜像)一起打包,通过容器相互隔离</p>
<p>虚拟化技术:容器和虚拟机</p>
<p>Docker相比vm,是非常的轻巧,只有最核心的环境,不适一个完整的操作系统,直接运行在宿主机的内核,也没有虚拟硬件,Docker是go语言写的</p>
<p>docker进行就好比是一个模版,可以通过镜像创建多个容器</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ul>
<li>卸载旧版本的Docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line"><span class="bash">                 docker-client \</span></span><br><span class="line"><span class="bash">                 docker-client-latest \</span></span><br><span class="line"><span class="bash">                 docker-common \</span></span><br><span class="line"><span class="bash">                 docker-latest \</span></span><br><span class="line"><span class="bash">                 docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">                 docker-logrotate \</span></span><br><span class="line"><span class="bash">                 docker-engine</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装依赖和配置仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    <span class="comment">#可以将仓库地址换为阿里云的仓库地址</span></span></span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Docker引擎</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动Docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></table></figure>

<ul>
<li>运行案例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run 镜像名</span></span><br></pre></td></tr></table></figure>

<ul>
<li>阿里云镜像加速</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /etc/docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span></span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://x6q6y7t0.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker的位置"><a href="#Docker的位置" class="headerlink" title="Docker的位置"></a>Docker的位置</h3><p>/var/lib/docker</p>
<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示docker的版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker version</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看docker的镜像信息,和docker的详细信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有本地的主机上的镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">搜索镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker search 镜像名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">下载镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull 镜像名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f  镜像ID</span>  </span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><ul>
<li>新建容器并运行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run [可选参数] image</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name <span class="string">'Name'</span>	 	 容器名字</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d				后台方式运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -it				使用交互方式运行,进入容器查看内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p				指定容器的端口</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>查看运行的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">可选参数</span></span><br><span class="line">-a 				列出运行过的+正在运行的</span><br><span class="line">-q				只显示容器的编号</span><br></pre></td></tr></table></figure>

<ul>
<li>从容器中退出</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从容器中停止并退出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中不停止退出</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure>

<ul>
<li>删除容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps -aq)(也可以写文件名)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-f				强制删除</span></span><br></pre></td></tr></table></figure>

<ul>
<li>#启动和停止容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start 容器id</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart 容器id</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop 容器id(自己去的容器名)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span> 容器id</span></span><br></pre></td></tr></table></figure>

<h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><ul>
<li>后台启动服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d 镜像名</span></span><br></pre></td></tr></table></figure>

<p>如果运行的容器没有前台应用,容器会自动停止</p>
<ul>
<li>查看容器中的进程信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top 容器id</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看容器的元数据</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect 容器id</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进入正在运行的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器后进入一个新的终端</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 容器id(自己取的容器名) /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器正在运行的终端</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker attach 容器id</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从容器内拷贝文件到主机</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp 容器id:目录/文件 主机的目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看docker的运行状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stats</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>创建自己的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cocker commit -a=<span class="string">"xiaojian"</span> -m=<span class="string">"描述"</span> 容器id 自己取的镜像名:标签</span></span><br></pre></td></tr></table></figure>

<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>容器的持久化和同步操作,容器间的数据共享</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -v 主机的目录:容器的目录[:ro/rw] 容器id(容器名)</span></span><br></pre></td></tr></table></figure>

<p>主机上和容器中会各占一份空间,双倍的空间</p>
<p>默认是rw是容器对该文件可读可写的,ro是容器对该文件可读的</p>
<h3 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h3><p>不写容器外的地址</p>
<h3 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h3><p>把容器外的地址写成一个名字</p>
<h3 id="挂载的位置"><a href="#挂载的位置" class="headerlink" title="挂载的位置"></a>挂载的位置</h3><p>/var/lib/docker/vomumes</p>
<h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>dockerfile用来构建镜像的文件</p>
<h2 id="Docker网络服务"><a href="#Docker网络服务" class="headerlink" title="Docker网络服务"></a>Docker网络服务</h2><h2 id="IDEA整合Docker"><a href="#IDEA整合Docker" class="headerlink" title="IDEA整合Docker"></a>IDEA整合Docker</h2><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><h2 id="CI-CD-Jenkins"><a href="#CI-CD-Jenkins" class="headerlink" title="CI\CD Jenkins"></a>CI\CD Jenkins</h2><h2 id="Docker错误解决"><a href="#Docker错误解决" class="headerlink" title="Docker错误解决"></a>Docker错误解决</h2><p>服务器宕机后,docker服务被关闭,需要重新开启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure>

<p>解决方法:systemctl start docker</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章发布</title>
    <url>/2021/03/11/%E5%B7%A5%E5%85%B7/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h1><ol>
<li>cd 55555Blog</li>
<li>hexo new [-p 路径] 文章的标题</li>
<li>hexo clean</li>
<li>hexo g</li>
<li>hexo d</li>
</ol>
<h2 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h2><ul>
<li>文件头的描述信息的：的后面必须有空格</li>
<li>路径的相对位置是source/_post，路径中没有的文件夹将自动创建，最后一个为文件名，会被自动加上.md</li>
<li>第5,6步可联合写成 hexo g -d</li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的使用</title>
    <url>/2021/03/22/%E5%B7%A5%E5%85%B7/Nginx%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2><p>Nginx是一个高性能的HTTP和反向代理服务器</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul>
<li>正向代理: 在客户端需要配置代理服务器</li>
<li>反向代理: 在客户端是无感知的,客户端访问的是访问反向代理服务器</li>
</ul>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><pre><code>+ 将原先请求分发到多个服务器</code></pre>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><ul>
<li>将静态和动态资源分开部署</li>
</ul>
<h2 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h2><ul>
<li>官网 nginx.org</li>
<li>安装依赖: yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</li>
<li>安装nginx: <ol>
<li>tar -zxvf nginx.xx.tar.gz</li>
<li>进入解压缩目录,执行./configure</li>
<li>make &amp;&amp; make install</li>
<li>以上命令需要切换为root用户</li>
<li>注意sudo passwd root,第一切换为超级用户时,需要执行</li>
</ol>
</li>
<li>安装成功:/usr/local/sbin</li>
<li>执行在/usr/local/sbin/nginx</li>
<li>centos:开放防火墙<ul>
<li>firewall-cmd –list-all</li>
<li>firewall-cmd –add-service=http –permanent</li>
<li>sudo firewall-cmd –add-port=80/tcp –permanent</li>
<li>firewall-cmd –reload</li>
</ul>
</li>
<li>没有设置防火墙也有可能可以访问</li>
</ul>
<h2 id="Nginx的常用命令"><a href="#Nginx的常用命令" class="headerlink" title="Nginx的常用命令"></a>Nginx的常用命令</h2><ul>
<li>必须要进入sbin中,才能使用 命令</li>
<li>查看Nginx的版本: ./nginx -v</li>
<li>关闭Nginx: ./nginx -s stop</li>
<li>启动Nginx: ./nginx</li>
<li>重加载: 修改后 config后,./nginx -s reload</li>
</ul>
<h2 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h2><ul>
<li>位置: /usr/local/conf/ngnix.config</li>
<li>组成: <ul>
<li>全局块: 从开始到events的之前的值<ul>
<li>worker process值越大,可以支持的并发处理量也越大</li>
</ul>
</li>
<li>events块<ul>
<li> work_connections 1024: 支持的最大连接数</li>
</ul>
</li>
<li>http块</li>
</ul>
</li>
</ul>
<h2 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h2><ul>
<li>单个服务器:在serve中添加proxy_pass http://你的服务器地址:你的端口</li>
<li>多个服务器: location ~ /edu/ {proxy_pass <a href="http://127.0.0.1:8081}">http://127.0.0.1:8081}</a> location ~ /vod/{proxy_pass <a href="http://127.0.0.1:8080}">http://127.0.0.1:8080}</a></li>
</ul>
<h2 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http {</span><br><span class="line">	upstream myserver{</span><br><span class="line">		server 192.168.22.134:8081;</span><br><span class="line">		server 192.168.22.134:8080;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">	location / {</span><br><span class="line">		proxy_pass http://myserver;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="nginx使用的分配策略"><a href="#nginx使用的分配策略" class="headerlink" title="nginx使用的分配策略"></a>nginx使用的分配策略</h3><ul>
<li>轮询</li>
<li>weight: server xxxx weight=xxx,权重默认为1</li>
<li>ip_hash myserver{ip_hash;}:每个IP访问固定的服务器</li>
<li>fair:根据相应的时间,写法与ip_hash一样</li>
</ul>
<h2 id="动静分离-1"><a href="#动静分离-1" class="headerlink" title="动静分离"></a>动静分离</h2><p>将动态请求发给后端服务器,例如要访问数据中的文件中</p>
<p>将静态请求发给前端服务器,列如图片</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">local /www/ {</span><br><span class="line">	root //data/;</span><br><span class="line">	index index.html index;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">local /image/ {</span><br><span class="line">	root /data/;</span><br><span class="line"><span class="meta">	#</span><span class="bash">列出反目录,作用不大</span></span><br><span class="line">	autoindex on;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<h3 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h3><ul>
<li>要ping通虚拟机:<ul>
<li>要防火墙开启相应的端口</li>
<li>vm8要和虚拟机的ip地址在同一网段</li>
<li>ifconfig可以查看虚拟机ip地址,ens33是ip地址</li>
</ul>
</li>
<li>host:<ul>
<li>可以在当中添加ip和域名的映射</li>
</ul>
</li>
<li>多个服务器要注意:开启多个服务端口</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的使用</title>
    <url>/2021/03/23/%E5%B7%A5%E5%85%B7/Redis%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Redis运行"><a href="#Redis运行" class="headerlink" title="Redis运行"></a>Redis运行</h2><ol>
<li>在redis.conf中把daemonize的no改为yes,设置为后台启动,否则每次启动终端只能进入redis的启动界面,无法对它进行操作</li>
<li>运行时可以指定 要配置的文件</li>
<li>使用redis-cli -p 使用客户端进行连接</li>
<li>退出redis <ul>
<li>shutdown会关闭redis-service服务</li>
<li>exit只会关掉redis-cli,退出,不会关闭redis-service</li>
</ul>
</li>
</ol>
<h2 id="设置RDM连接Redis"><a href="#设置RDM连接Redis" class="headerlink" title="设置RDM连接Redis"></a>设置RDM连接Redis</h2><ol>
<li>注释掉配置文件中的bind 127.0.0.1</li>
<li>添加requiredpass 你的密码</li>
<li>名字:任意,地址:你的服务器公网地址,密码required写的密码</li>
</ol>
<p><img src="https://pictrue-1304449289.cos.ap-nanjing.myqcloud.com/imgimage-20210324151802016.png"></p>
<pre><code>4. 修改阿里云的安全组,把6379端口打开
 5. 在这里设置密码后,redis-cli 要-a 密码</code></pre>
<h2 id="Redis的基本命令"><a href="#Redis的基本命令" class="headerlink" title="Redis的基本命令"></a>Redis的基本命令</h2><ul>
<li> 切换数据库:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> select 数据名</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看数据的大小</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dbsize</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看数据所有的键 </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> keys *</span></span><br></pre></td></tr></table></figure>

<ul>
<li>清空当前的数据库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flushdb</span></span><br></pre></td></tr></table></figure>

<ul>
<li>清空所有的数据库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flushall</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-Key的基本命令"><a href="#Redis-Key的基本命令" class="headerlink" title="Redis-Key的基本命令"></a>Redis-Key的基本命令</h2><ul>
<li>查看该键是否存在</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不存在返回0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存在返回1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> exists 键</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将一个键移到另外一个库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> move 键 数据库id</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置一个键的过期时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> expire 键 时间(秒)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看一个键的过期时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ttl 键</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看一个键的类型</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">type</span> 键</span></span><br></pre></td></tr></table></figure>

<h2 id="String字符串类型"><a href="#String字符串类型" class="headerlink" title="String字符串类型"></a>String字符串类型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> 键 值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> get 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有该键的话,则创建该键值对</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> append 键 <span class="string">'添加在值末尾的值'</span></span>		</span><br><span class="line"><span class="meta">$</span><span class="bash"> strlen 键</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> incr 键</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> decr 键</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> incrby 键 要增加的值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> decrby 键 要减少的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的 0-1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是一个闭区间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> getrange 键 开始的位置 结束的位置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setrange 键 开始的偏移 替换的值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setex(<span class="built_in">set</span> with expire) 设置过期时间</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果键不存在,创建,并返回1,如果不能设置则返回-1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setnx 键 值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量设置值</span>   </span><br><span class="line"><span class="meta">$</span><span class="bash"> mset 键1 值1 键2 值2 键3 值3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> msetnx是一个原子性的操作,要么一起成功,要么一起失败</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> msetnx 键1 值1 键2 值2 键3 值3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置对象(用字符串)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> user:id <span class="string">"{name:aa, age: 20}"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mset user:id:name aa user:id:age 20</span></span><br><span class="line"><span class="meta">#</span><span class="bash">返回的是原先的值</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> getset 键 值</span></span><br></pre></td></tr></table></figure>

<h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除尾部的元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpop 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过下标获得队列中的某一个值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lindex 键 索引</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获得列表的元素的大小</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> llen 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过元素的值移除元素,列表中有多个相同的值,次数写0,也会执行一次</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lrem 键 次数 值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取一个列表,会对原来的列表造成影响,是一个闭区间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ltrim 键 start end</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除列表的最后一个元素,移动到新的列表中,目的不存在的话,会创建一个新的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpoplpush 源 目的</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置索引位置元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lset 键 索引 值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将某一个元素插入到某一元素的前面或后面,如果有多个相同的值,会以第一个元素为准</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> linsert 键 (before|after) 元素 值</span></span><br></pre></td></tr></table></figure>

<h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 往集合中添加值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sadd 键 值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取集合中的所有值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> smembers 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看集合中是否有该值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sismember 键 值</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看键中的值的个数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scard 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除键中的值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> srem 键 值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从集合中抽选出一个元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> srandmember 键 次数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机移除一个元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> spop 键 次数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将指定的值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> smove 起始键 目的键 值</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> a和b的差集 a-b</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> sdiff a b</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> a和b的交集</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> sinter a b</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> a和b的并集</span></span><br><span class="line"><span class="meta"> $</span><span class="bash"> sunion a b</span></span><br></pre></td></tr></table></figure>

<h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><ul>
<li><p>增删改查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hset 键 域 值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hget 键 域</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> hset和hmset也可以同时设置多个值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hmset 键 域 值...</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hmget 键 域 域...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取<span class="built_in">hash</span>中所有的值,会以键值对进行展示</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hgetall 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会将键值对一起删除</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> hdel 键 域</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增强操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取<span class="built_in">hash</span>中的键值对的个数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hlen 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断<span class="built_in">hash</span>中键的是否存在</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexists 键 域</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 获得所有的键,值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hkeys 键</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hvals 键</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hinreby 键 域 增减的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不存在可以设置,存在不可以设置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hsetnx 键 域 值</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Zset类型"><a href="#Zset类型" class="headerlink" title="Zset类型"></a>Zset类型</h2><ul>
<li><p>增删改查(不存在改)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 优先级越小,越靠前</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zadd 键 优先级 值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrem 键 值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zpopmax 键</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zpopmin 键</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增强操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zrange 键 开始 结束</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> zrevrange 键 开始 结束</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许进行排序的范围</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrangebyscore 键 值的最小值 值的最大值 [withscores]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrevrangebyscore 键 值的最大值 值的最小值 [withscores]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获得所有键的数量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zcard 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获得范围内的键数量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zcount 键 范围的开始 范围的结束</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Geospatial类型"><a href="#Geospatial类型" class="headerlink" title="Geospatial类型"></a>Geospatial类型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> geoadd 键 经度,纬度 ,名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> geopos 键 名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两个地点之间的距离</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> geodist 键 名称 名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在集合中找在该经度和纬度的距离之内的名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> georadius 键 经度 纬度 距离 单位 [...]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 位置用名称来指定</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> georadiusbymember 键 名称 [...]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrange 键</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> zrem 键 值</span></span><br></pre></td></tr></table></figure>

<h2 id="Hyperloglog类型"><a href="#Hyperloglog类型" class="headerlink" title="Hyperloglog类型"></a>Hyperloglog类型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pfadd 键 值 值 值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pfcount 键</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pfmerge 键 键</span></span><br></pre></td></tr></table></figure>

<ul>
<li>消耗的空间极小,但会有1%100的误差</li>
</ul>
<h2 id="Bitmaps类型"><a href="#Bitmaps类型" class="headerlink" title="Bitmaps类型"></a>Bitmaps类型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> setbit 键 索引 (0/1)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> getbit 键 索引</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bitcount 键 [开始的索引, 结束的索引]</span></span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>redis单条命令是保存原子性的,但是事务不保证原子性,redis没有隔离级别的概念,发出执行事务才会执行</p>
<ul>
<li>开启命令: multi</li>
<li>命令入队: (……)</li>
<li>执行事务: exec</li>
<li>放弃事务: discard</li>
</ul>
<p>编译错误: 队列中的命令全部被放弃 命令入队就会有错误提示</p>
<p>运行错误: 队列中其它命令(无论前后)都会被执行</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>认为什么时候都会出问题,无论做什么都会加锁</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁:"></a>乐观锁:</h3><p>认为什么时候都不会出问题,所以不上锁,更新数据的时候去判断一下,在此期间是否有别的人造成修改,比较version,决定是否更新</p>
<p>一旦事务成功,监控就会取消,事务执行失败需要先unwatch,再重新watch</p>
<h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis是官方推荐的java连接开发工具,使用java操作Redis中间件</p>
<ol>
<li>导入对应的依赖</li>
</ol>
<p><img src="https://pictrue-1304449289.cos.ap-nanjing.myqcloud.com/imgimgimgimage-20210326092825960.png"></p>
<p>​    2.测试连接</p>
<p><img src="https://pictrue-1304449289.cos.ap-nanjing.myqcloud.com/imgimgimage-20210326093729642.png"></p>
<h2 id="Spring-boot整合"><a href="#Spring-boot整合" class="headerlink" title="Spring boot整合"></a>Spring boot整合</h2><p>在SpringBoot2.x之后,原来使用的jedis被替换为lettuce</p>
<h2 id="Redis-conf比较重要的配置"><a href="#Redis-conf比较重要的配置" class="headerlink" title="Redis.conf比较重要的配置"></a>Redis.conf比较重要的配置</h2><ul>
<li><p>deamonize: 默认是no,是否以守护进程开启</p>
</li>
<li><p>requirepass:是启动redis-service指定的密码,</p>
<ul>
<li>config get requirepass获得的时这次回话的密码</li>
<li>config set requirepass可以修改这次回话的密码,不会修改配置文件中密码,如果在使用redis-cli 时没有-a 指定密码,可以通过进入redis-cli中后,使用auth 密码,进行登陆</li>
</ul>
</li>
<li><p>maxmemory &lt;bytes&gt;: 使用的最大内存量</p>
</li>
<li><p>maxmemory-policy noeviction 内存达到上限后的处理策略</p>
</li>
<li><p>appendonly:默认是no,默认不开启aof模式,开启的是RDB</p>
</li>
</ul>
<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB-snapshotting-RDB"><a href="#RDB-snapshotting-RDB" class="headerlink" title="RDB(snapshotting RDB)"></a>RDB(snapshotting RDB)</h3><ul>
<li><p>开启: 在配置文件中写 save配置,默认就配置了多个</p>
</li>
<li><p>方式: 满足条件时,进行一次存储,读取时,速度较快</p>
</li>
<li><p>触发的条件</p>
<ul>
<li>满足save条件</li>
<li>执行flushall命令</li>
<li>退出redis-server</li>
</ul>
</li>
<li><p>恢复文件: 如果安装目录下(redies-service的同级目录下)有dump.rdb就会自动恢复其中的数据</p>
</li>
<li><p>优点: </p>
<ul>
<li>适合大规模的数据恢复,速度快</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>需要一定的时间间隔进程进行操作,如果redis意外宕机,会损失最后一次修改的数据</li>
</ul>
</li>
</ul>
<h3 id="AOF-append-only-File"><a href="#AOF-append-only-File" class="headerlink" title="AOF(append only File)"></a>AOF(append only File)</h3><ul>
<li>开启: appendonly yes</li>
<li> 方式: 将操作以日志的形式,记录下所有写的操作(不记录读),</li>
<li>恢复文件: 执行日志操作生成redis的数据库,速度比较慢</li>
<li>触发条件: 配置文件中,修改配置,每秒,每次进行记录操作</li>
<li>优点: <ul>
<li>每次修改和每秒修改可以被保存,文件的完整性高</li>
</ul>
</li>
<li>缺点:<ul>
<li>恢复速度慢,需要执行文件中的指令</li>
</ul>
</li>
<li> 当文件过大是,可以自动进行重写AOF文件</li>
</ul>
<h2 id="Redis发布和订阅"><a href="#Redis发布和订阅" class="headerlink" title="Redis发布和订阅"></a>Redis发布和订阅</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> subscribe 频道</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> publish 频道 数据</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis集群环境搭建"><a href="#Redis集群环境搭建" class="headerlink" title="Redis集群环境搭建"></a>Redis集群环境搭建</h2><p>主从复制,读写分离.主机负责写,从机负责读,主机将数据中复制到从机的redies节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前库的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> info relication</span></span><br></pre></td></tr></table></figure>

<p>要修改的配置</p>
<ul>
<li>端口</li>
<li>pid名字</li>
<li>log文件名字</li>
<li>dump.rdb名字</li>
</ul>
<p>只需要配置从机就行了</p>
<ul>
<li>手动配置的方式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> SLAVEOF HOST PORT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当HOST RORT为no one时,会将slave变为master</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自动配置的方式: 在配置文件中设置relicaof </li>
<li>tip<ul>
<li>如果主机设置了密码,要在masterauth中填入主机密码</li>
<li>主机可读,可写</li>
<li>从机只能读</li>
</ul>
</li>
</ul>
<h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><p>salve启动成功连接到master后会发送给master一个sync同步命令,master接受到命令,启动后台的存盘进程,master会将全部的数据传送到slave,并完成一次同步</p>
<ul>
<li>全量复制: Master将一开始时将全部的数据传送给salve</li>
<li>增量复制: Master将新的数据传送给slave</li>
</ul>
<h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><ol>
<li>配置sentinel.conf文件,sentinel monitor 名字随意 ip post 需要哨兵认同的个数</li>
<li>启动哨兵</li>
<li>主从密码相同.不然无法访问,从密码其实是没有用的,只要退出了集群,再进入集群,会要求重新输入密码,主机挂了,重选主机,会要求所有的机器重新输密码</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云的配置</title>
    <url>/2021/03/23/%E5%B7%A5%E5%85%B7/%E9%98%BF%E9%87%8C%E4%BA%91/</url>
    <content><![CDATA[<h2 id="windows需要安装的东西"><a href="#windows需要安装的东西" class="headerlink" title="windows需要安装的东西"></a>windows需要安装的东西</h2><ul>
<li>Xshell:在window上远程连接服务器</li>
<li>XFTP:windows和服务器之间传输文件</li>
</ul>
<h3 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h3><ul>
<li>以上两个软件有学生免费策略</li>
<li>使用步骤(配置其中一个就可以了)</li>
</ul>
<p><img src="https://pictrue-1304449289.cos.ap-nanjing.myqcloud.com/imgimage-20210323094537481.png" alt="image-20210323094537481"></p>
<ul>
<li>新建回话:不一定是服务器的实例ID,这是只是这个一个回话的名称,自己可以随便取</li>
<li>主机:服务器的公网IP</li>
</ul>
<p><img src="https://pictrue-1304449289.cos.ap-nanjing.myqcloud.com/imgimage-20210323095535949.png" alt="image-20210323095535949"></p>
<ul>
<li>用户名:root</li>
<li>密码:服务器的实例密码,在购买网站上设置</li>
<li>方法:Password</li>
</ul>
<h2 id="服务器安装的东西"><a href="#服务器安装的东西" class="headerlink" title="服务器安装的东西"></a>服务器安装的东西</h2><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2>]]></content>
      <categories>
        <category>工具</category>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Node</title>
    <url>/2021/03/22/%E5%89%8D%E7%AB%AF/Node/%E8%AE%A4%E8%AF%86Nodejs/</url>
    <content><![CDATA[<h2 id="什么是Node"><a href="#什么是Node" class="headerlink" title="什么是Node"></a>什么是Node</h2><ul>
<li>是javaScript运行时环境,可以使js脱离浏览器执行</li>
</ul>
<p>浏览器中的javaScripte</p>
<ul>
<li>EcmaScript(js的语法)</li>
<li>BOM</li>
<li>DOM</li>
</ul>
<p>Node.js中的javaScript</p>
<ul>
<li>EcmaScript(js的语法)</li>
<li>提供了一些服务器级别的操作API<ul>
<li>文件读写</li>
<li>服务网络的构建</li>
<li>网络通信</li>
<li>http服务器</li>
</ul>
</li>
</ul>
<p>npm是包管理工具</p>
<h2 id="Node-js能做什么"><a href="#Node-js能做什么" class="headerlink" title="Node.js能做什么"></a>Node.js能做什么</h2><ul>
<li>web服务器后台</li>
<li>命令行工具(就像npm,git,hexo)</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在html中使用vue</title>
    <url>/2021/03/14/%E5%89%8D%E7%AB%AF/Vue/HelloVuejs%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="Vue-js的导入"><a href="#Vue-js的导入" class="headerlink" title="Vue.js的导入"></a>Vue.js的导入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过js导入vue.js的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"相对该文件的vue.js位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	   	<span class="comment">//在SE6语法中定义变量用const(常量)和let(变量)关键字代替var</span></span></span><br><span class="line"><span class="javascript">       	<span class="comment">//将把id为app的元素挂载到app对象,对div元素中的message进行替换</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: {</span><br><span class="line"><span class="javascript">            	message: <span class="string">"hello world"</span></span></span><br><span class="line">        }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解:</p>
<ul>
<li>html注释:&lt;!– –&gt;</li>
<li>javascript注释://</li>
</ul>
<h2 id="Vue列表的展示"><a href="#Vue列表的展示" class="headerlink" title="Vue列表的展示"></a>Vue列表的展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in movies"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">"相对该文件的vue.js位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Aue({</span></span><br><span class="line"><span class="javascript">        	el: <span class="string">"#id"</span>,</span></span><br><span class="line">        	data: {</span><br><span class="line"><span class="javascript">       			movies: [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>]</span></span><br><span class="line">        	}</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue计数器的展示"><a href="#Vue计数器的展示" class="headerlink" title="Vue计数器的展示"></a>Vue计数器的展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前计数: {{counter}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;button v-on:click="counter++"&gt;+&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;button v-on:click="counter&amp;#45;&amp;#45;"&gt;-&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line">        data: {</span><br><span class="line">            counter: 0</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"add被执行"</span>)</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            sub: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"sub被执行"</span>)</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>@是v-on:的语法糖,也就是简写,</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol>
<li><ul>
<li>Q: 什么时候使用{--{}–},什么时候不使用</li>
<li>在标签的内容中使用,属性里面不能写</li>
</ul>
</li>
<li><ul>
<li>Q: this到底指向的是哪个对象,为什么要使用this </li>
<li>A: this指向的app的对象,使用this还没有创建app对象,需要指定??</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Router的使用</title>
    <url>/2021/03/18/%E5%89%8D%E7%AB%AF/Vue/Router/</url>
    <content><![CDATA[<h2 id="后端路由和前端路由"><a href="#后端路由和前端路由" class="headerlink" title="后端路由和前端路由"></a>后端路由和前端路由</h2><ul>
<li>后端路由和后端渲染:jsp</li>
<li>前后端分离和前端渲染:ajax</li>
<li>单页面富应用和前端路由:SPA</li>
</ul>
<h2 id="改变URl中的值而界面不刷新"><a href="#改变URl中的值而界面不刷新" class="headerlink" title="改变URl中的值而界面不刷新"></a>改变URl中的值而界面不刷新</h2><ul>
<li>location.hash = ‘aaa’</li>
<li>history.pushState({},’’, ‘home’)</li>
<li>history.back()</li>
<li>history.forward()</li>
<li>history.replaceState({},’’, ‘about’)</li>
<li>history.go(-1) 等同于history.back</li>
<li>history.go(1)等同于history.forward</li>
</ul>
<h2 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h2><ul>
<li>npm install vue-router –save</li>
<li>import Vue from ‘vue’</li>
<li>import VueRouter from ‘vue-router’</li>
<li>Vue.use(VueRouter),传入插件</li>
<li>const router = new VueRouter({routes: []})</li>
<li>import router from ‘./router’</li>
<li>在App中挂载</li>
</ul>
<h2 id="使用vue-router"><a href="#使用vue-router" class="headerlink" title="使用vue-router"></a>使用vue-router</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routers = [</span><br><span class="line">    {</span><br><span class="line">        path: <span class="string">'/home'</span>,</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        path: <span class="string">'about'</span>,</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'home'</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改默认路径</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">	redirect: <span class="string">'/home'</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<ul>
<li>history模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router(</span><br><span class="line">{</span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">'history'</span></span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<ul>
<li>router-link的属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/home'</span> <span class="attr">tag</span>=<span class="string">'button'</span> <span class="attr">replace</span> <span class="attr">class</span>=<span class="string">"router-link-active"</span> <span class="attr">active-class</span>=<span class="string">'active'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由里</span></span><br><span class="line">linkActiveClass: <span class="string">'active'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过代码的形式去修改路径</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">'/home'</span>);</span><br><span class="line"><span class="built_in">this</span>.$router.replace(<span class="string">'/about'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    path: <span class="string">'/user/:abc'</span>,</span><br><span class="line">    component: User</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user/'+userId"</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哪一个路由处于活跃状态,就拿到哪个,方法中的写法</span></span><br><span class="line"><span class="built_in">this</span>.$route.params.abc</span><br><span class="line"><span class="comment">//写在mustache中</span></span><br><span class="line">$router.params.abc</span><br></pre></td></tr></table></figure>

<h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><ul>
<li>app.js:当前应用程序开发的所有代码(业务代码)</li>
<li>manifest.js:为打包的代码做底层支撑</li>
<li>vendor.js:提供第三方vue,router,axios</li>
</ul>
<p>路由懒加载,一个路由打包一个js,只有当用到的时候才会下载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../compents/Home"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../component/Home"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path: <span class="string">'/home'</span>,</span><br><span class="line">component: Home,</span><br><span class="line">children: [</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//子路径前不要加/</span></span><br><span class="line">        path: <span class="string">'news'</span>,</span><br><span class="line">        component: HomeNews</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--to中必须写全路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/news"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><ul>
<li>params:类型,路径参数,参数较少</li>
<li>query:类型?查询(查询中用&amp;分隔参数),大量的参数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{path: '/profile', query: {name: '55555'}}"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    {{$route.query.name}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push({</span><br><span class="line">    path: <span class="string">'/profile'</span>,</span><br><span class="line">  	query: {</span><br><span class="line">        name: <span class="string">'55555'</span></span><br><span class="line">    }  </span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="router和route"><a href="#router和route" class="headerlink" title="router和route"></a>router和route</h2><ul>
<li>router是整个router对象</li>
<li>route是当前活跃的路径的对象</li>
<li>用插件要使用Vue.use(插件名),相当于插件.install</li>
<li>注册时用大写,使用是用-</li>
<li>所有的组件都继承自vue的原型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype.name = <span class="string">"哈哈"</span></span><br></pre></td></tr></table></figure>

<h2 id="全局导航守卫"><a href="#全局导航守卫" class="headerlink" title="全局导航守卫"></a>全局导航守卫</h2><ul>
<li>created()</li>
<li>mounted()</li>
<li>updated()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在route中加上元数据</span></span><br><span class="line">meta{</span><br><span class="line">    title: <span class="string">'首页'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//router中写</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//必须调用next</span></span><br><span class="line">    <span class="comment">//为什么有match[0],只在第一层的路径进行了匹配</span></span><br><span class="line">    doucument.title = to.matched[<span class="number">0</span>].title</span><br><span class="line">    next(),</span><br><span class="line">})</span><br><span class="line"> </span><br><span class="line"><span class="comment">//后置钩子,不需要主动调用next</span></span><br><span class="line">afterEach</span><br></pre></td></tr></table></figure>

<h2 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h2><ul>
<li><p>在route中配</p>
<h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2></li>
<li><p>在组件中配</p>
</li>
</ul>
<h2 id="Vue-keep-alive"><a href="#Vue-keep-alive" class="headerlink" title="Vue-keep-alive"></a>Vue-keep-alive</h2><ul>
<li>keep-alive是Vue内置的一个组件,可以时被包含的组件,不被渲染,离开时不会被销毁,回来时不会被创建</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使以前的状态的得到保存,使用组件内守卫</p>
<p>beforeRouteLeave,在离开之前,得到保存</p>
<p>activated()和deactived()只有在keep-alive时,才是有效的</p>
<ul>
<li>keep-alive:include使用正则,只有满足条件的该正则的的名字的组件才会有用,exclude会排除,正则中不要随便加空格</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue脚手架的使用</title>
    <url>/2021/03/18/%E5%89%8D%E7%AB%AF/Vue/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h2><ul>
<li>CLI是Command-Line Interface,翻译为命令行界面</li>
<li>拉取2.x模版,npm install -g @vue/cli-init ,vue init webpack my-project(注意代理的问题)</li>
<li>创建脚手架3 vue create my-project</li>
<li>创建脚手架4和3差别不大</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li>为JS在浏览器外提供了运行时环境</li>
<li>node js文件:可以运行js文件</li>
</ul>
<h2 id="修改Vue-CLI的配置"><a href="#修改Vue-CLI的配置" class="headerlink" title="修改Vue CLI的配置"></a>修改Vue CLI的配置</h2><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>是一种定义函数的方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//一个参数的时候前面的括号可以省略</span></span><br><span class="line"><span class="keyword">const</span> power = <span class="function"><span class="params">num</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> num * num;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//函数代码块只有一行代码</span></span><br><span class="line"><span class="keyword">const</span> mul = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 * num2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有返回值, 返回值为undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>箭头函数一般会在传函数的时候的使用</li>
<li>箭头函数的this,引用的是最近,向外层作用查找</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>网络模块的封装</title>
    <url>/2021/03/20/%E5%89%8D%E7%AB%AF/Vue/axios/</url>
    <content><![CDATA[<h2 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认前况下是get请求</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">''</span>;</span><br><span class="line">axios.defaults.timeout = <span class="number">5</span> </span><br><span class="line">axios({</span><br><span class="line">    baseURL: <span class="string">''</span>,</span><br><span class="line">    timeout: </span><br><span class="line">    url: </span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    <span class="comment">//针对get请求的拼接</span></span><br><span class="line">    params: {</span><br><span class="line">    </span><br><span class="line">	},</span><br><span class="line">     data: {</span><br><span class="line">      </span><br><span class="line">      }</span><br><span class="line">}).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios发送并发请求</span></span><br><span class="line">axios.all([axios(), axios()]).then(<span class="function"><span class="params">results</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(results)</span><br><span class="line">})</span><br><span class="line"><span class="comment">//数组的解构</span></span><br><span class="line">int [name1,name2,name3] = array</span><br></pre></td></tr></table></figure>

<p>axio是支持Promise的</p>
<h2 id="axios的配置"><a href="#axios的配置" class="headerlink" title="axios的配置"></a>axios的配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(</span><br><span class="line">{</span><br><span class="line">    baseURL: <span class="string">''</span></span><br><span class="line">    timeout: <span class="number">5000</span> </span><br><span class="line">   </span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="axios的拦截器"><a href="#axios的拦截器" class="headerlink" title="axios的拦截器"></a>axios的拦截器</h2><ul>
<li>比如每次发送网络请求时,都希望在界面中显示请求图标</li>
<li>某些网络请求(比如登陆(token)),必须携带一些特殊信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> {<span class="built_in">console</span>.log(config); <span class="keyword">return</span> config}, <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">instance.intercepts.use(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}, <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">}) </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>slot的使用</title>
    <url>/2021/03/16/%E5%89%8D%E7%AB%AF/Vue/slot/</url>
    <content><![CDATA[<h2 id="slot预留标签"><a href="#slot预留标签" class="headerlink" title="slot预留标签"></a>slot预留标签</h2><ul>
<li>使用在组件标签内使用被的标签,可以在内使用多个</li>
<li>在slot标签内预留一个默认的值</li>
</ul>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认替换的没有属性的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">""</span>&gt;</span>text&lt;\span&gt;</span><br></pre></td></tr></table></figure>

<h2 id="编译的作用域"><a href="#编译的作用域" class="headerlink" title="编译的作用域"></a>编译的作用域</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spn</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">spn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>一开始把子组件当作普通的元素,用的是父组件的模版</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span> = <span class="string">"item in xxx.data"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>tabbar</title>
    <url>/2021/03/19/%E5%89%8D%E7%AB%AF/Vue/tabbar%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="给路径取别名"><a href="#给路径取别名" class="headerlink" title="给路径取别名"></a>给路径取别名</h2><ul>
<li>@: 相当于src</li>
<li>在src等不需要import的路径必须加在最前面~</li>
</ul>
<h2 id="Promies是一种异步编程机制"><a href="#Promies是一种异步编程机制" class="headerlink" title="Promies是一种异步编程机制"></a>Promies是一种异步编程机制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {<span class="built_in">console</span>.log(<span class="string">"hello world"</span>)}, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        resolve()</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">}).then(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">//处理代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            resolve()</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="什么时候使用Promise"><a href="#什么时候使用Promise" class="headerlink" title="什么时候使用Promise"></a>什么时候使用Promise</h2><ul>
<li><p>一般情况下是有异步操作进行封装</p>
</li>
<li><p>调用resolve进then,调用reject进catch</p>
</li>
</ul>
<p>Promise有三种状态</p>
<ul>
<li>Pending: 等待</li>
<li>fulfiled: resolve</li>
<li>reject: catch</li>
</ul>
<p>在then中传入两个函数可以省略catch,如果Promise中用不到reject,可以省略reject函数 </p>
<p> Promise的简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res + <span class="string">" "</span>)</span><br><span class="line"><span class="comment">//省略掉Promise.resolve</span></span><br><span class="line"><span class="keyword">return</span> res + <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err + <span class="string">" "</span>)</span><br><span class="line">thows <span class="string">'err'</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise的ALL"><a href="#Promise的ALL" class="headerlink" title="Promise的ALL"></a>Promise的ALL</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {}), <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> )]).then(<span class="function"><span class="params">results</span> =&gt;</span>	{</span><br><span class="line">  <span class="comment">//results是数组</span></span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="Vuex的作用"><a href="#Vuex的作用" class="headerlink" title="Vuex的作用"></a>Vuex的作用</h2><ul>
<li><p>Vuex是一个专为Vue.js应用程序开发的状态管理模式</p>
</li>
<li><p>可以使用Vue.prototype实现Vuex,但这种实现方法不是响应式的</p>
</li>
<li><p>action:进行的是异步操作(后端操作)</p>
</li>
<li><p>Mutations:可以进行同步操作</p>
</li>
</ul>
<h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><ul>
<li>State: 单一状态树,单例模式</li>
<li>Getters: 类似于计算属性,使用$store.getters.powCounter,more20stu(state, getters ) {return getters.morestu.length}),powerCouter(state){};moreAgeStu(state){return function (age){return 功能}}</li>
<li>Mutations: $store.commit(‘方法名’)<ul>
<li>第一个参数就是state,第二参数是传过来的参数</li>
<li>参数被称为mutationg的载荷payload</li>
<li>commit的两种提交风格,commit({})</li>
<li>mutation的响应规则,观察者模式,一开始定义的,当属性发生变化时,会通知所有利用该属性的界面发生变化,新增加的属性以info[addres],不会是响应式的,但set可以,Vue.set(state.info,键,值),也可以是数组,delete state.info.age可以删掉属性,该方式也不能做到响应式,Vue.delete(state.info, ‘age’),splice是操作数组的</li>
<li>常量当作方法名: [导入的常量]</li>
</ul>
</li>
<li>Action: 在这当中使用异步操作,可以让chrome中的插件正常进行跟踪,函数的第一参数不在是state了,是context,相当于store,调用context.commit<ul>
<li>this.$store.dispatch(“方法名”, 参数).then(res =&gt; {console.log()})</li>
</ul>
</li>
<li>Modules: </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">modules: {</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">}</span><br><span class="line"><span class="comment">//使用属性</span></span><br><span class="line"><span class="built_in">this</span>.$store.a.name</span><br><span class="line"><span class="comment">//mutations</span></span><br><span class="line"><span class="built_in">this</span>.$strore.commit()</span><br><span class="line"><span class="comment">//跨越式得到跟的root</span></span><br><span class="line"><span class="function"><span class="title">fullname3</span>(<span class="params">state, getters,rootState</span>)</span>{</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="comment">//action中的context,只会调用自己模块中的commit</span></span><br><span class="line"><span class="comment">//对象的结构</span></span><br><span class="line"><span class="keyword">const</span> {name, height, age} = obj</span><br></pre></td></tr></table></figure>

<h2 id="store的结构"><a href="#store的结构" class="headerlink" title="store的结构"></a>store的结构</h2><p>state主文件中,getters,actions,mutations在各自在单独的js文件中</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>v-model的使用</title>
    <url>/2021/03/16/%E5%89%8D%E7%AB%AF/Vue/v-model/</url>
    <content><![CDATA[<h2 id="v-model的基本使用"><a href="#v-model的基本使用" class="headerlink" title="v-model的基本使用"></a>v-model的基本使用</h2><ul>
<li>input</li>
<li>Textarea</li>
</ul>
<h2 id="v-model的原理"><a href="#v-model的原理" class="headerlink" title="v-model的原理"></a>v-model的原理</h2><ul>
<li>可以通过v-bind和v-on实现双向绑定</li>
<li>event在方法内不使用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="19.332ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 8544.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(444.7, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">在</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">元</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">素</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">的</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">属</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">性</text><text data-variant="normal" transform="translate(5400, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">类</text><text data-variant="normal" transform="translate(6300, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">要</text><text data-variant="normal" transform="translate(7200, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">写</text></g></g></g></svg></mjx-container></li>
</ul>
<h2 id="v-model结合radio类型"><a href="#v-model结合radio类型" class="headerlink" title="v-model结合radio类型"></a>v-model结合radio类型</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">vlaue</span>=<span class="string">要发送的值</span> <span class="attr">v-model</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>name相同代表同一组值,如果v-model的变量名是系统的就代表同一组,这时可以省略name</li>
</ul>
<h2 id="v-model结合checkbox类型"><a href="#v-model结合checkbox类型" class="headerlink" title="v-model结合checkbox类型"></a>v-model结合checkbox类型</h2> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">v-model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定到checkbox单选框</li>
<li>绑定到checkbox多选框</li>
<li>&lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同,有可能也需要在前面加:</li>
</ul>
<h2 id="v-model结合select类型"><a href="#v-model结合select类型" class="headerlink" title="v-model结合select类型"></a>v-model结合select类型</h2><ul>
<li>单选下拉框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span> = <span class="string">"abc"</span> <span class="attr">v-modle</span>=<span class="string">"变量名"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>下拉多选框,在select 中添加multiple,v-model绑定的是数组变量</li>
</ul>
<h2 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h2><ul>
<li>lazy,回车或失去焦点之后,才会改变data里面的变量</li>
<li>number,把文本转化为number类型</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>+ trim,去除前后的空格</code></pre>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack的使用</title>
    <url>/2021/03/17/%E5%89%8D%E7%AB%AF/Vue/webpack/</url>
    <content><![CDATA[<h2 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h2><p>webpack是现代的javaScript应用的静态模块打包工具,webpack,nodejs,npm之间的关系</p>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p>npm insall <a href="mailto:&#x77;&#x65;&#98;&#112;&#x61;&#x63;&#x6b;&#64;&#x33;&#46;&#54;&#46;&#x30;">webpack@3.6.0</a> -g全局安装</p>
<h2 id="使用Webpack"><a href="#使用Webpack" class="headerlink" title="使用Webpack"></a>使用Webpack</h2><ul>
<li> webpack ./src/main.js ./dist/bundle.js</li>
<li>index.html中引入/bundle.js文件</li>
</ul>
<h2 id="web的配置"><a href="#web的配置" class="headerlink" title="web的配置"></a>web的配置</h2><ul>
<li><p>创建webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">//错误写法path: './dist',</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">        filename:  <span class="string">'bundle.s'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
<li><p>path必须是一个绝对路径,动态获取路径</p>
</li>
<li><p>npm init 可以创建package.json</p>
</li>
<li><p>以下可以直接写 webpack</p>
</li>
<li><p>npm run “在package.json中script中的脚本”</p>
</li>
<li><p>在本地安装 npm install <a href="mailto:&#x77;&#x65;&#x62;&#x70;&#97;&#x63;&#x6b;&#64;&#x33;&#46;&#54;&#46;&#48;">webpack@3.6.0</a> –save-dev,</p>
</li>
<li><p>webpack是开发时依赖,在devDependencies</p>
</li>
<li><p>Dependendcies是运行时依赖</p>
</li>
<li><p>只要在terminal中敲webpack用的都是全局的</p>
</li>
<li><p>写了脚本,会优先用本地的</p>
</li>
</ul>
<h2 id="模块化CSS"><a href="#模块化CSS" class="headerlink" title="模块化CSS"></a>模块化CSS</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./css/normal.css"</span>)</span><br></pre></td></tr></table></figure>

<p>安装npm install –save-dev css-loader,只负责加载,但不负责,加载到DOM</p>
<p>use: []是从有往左加载的</p>
<p>加载大于限制的路径时,要在webpack.config.js文件中配置,publicPath: ‘dist/‘</p>
<p>将图片防止特定位置</p>
<ul>
<li>在url-loader中配置option: name: ‘img/[name].[hash:8].[ext]’</li>
</ul>
<h2 id="ES6语法处理"><a href="#ES6语法处理" class="headerlink" title="ES6语法处理"></a>ES6语法处理</h2><p>npm install –save-dev babel-loader@7 label-core-preset-es2015</p>
<h2 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h2><ul>
<li>在js文件中import 命名 from “vue”,这时默认去node_modules</li>
<li>安装: npm install vue –save</li>
<li>runtime-only:代码中,不可以有任何的template</li>
<li>runtime-compiler:代码中,可以包含compiler,compiler可以编译template</li>
<li>在moduel的同级中配置resolve:{alias: {‘vue$’: ‘vue/dist/vue.esm.js’}}</li>
</ul>
<h2 id="template和el关系"><a href="#template和el关系" class="headerlink" title="template和el关系"></a>template和el关系</h2><p>一旦定义了template会将替换掉挂载的元素</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mustache</title>
    <url>/2021/03/14/%E5%89%8D%E7%AB%AF/Vue/%E6%8F%92%E5%80%BC%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法:"></a>Mustache语法:</h2><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><ul>
<li>可以和属性选择器配合display:none</li>
</ul>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul>
<li><p>属性里面的值变成了变量名</p>
<ul>
<li>如果属性是一个字符串,只能使用这一种方法,不能用{}语法和[]语法,但可以用函数名()返回单个值</li>
<li>只有在vue中挂载了元素,element才能生效</li>
<li>element的span有些奇怪,12应该是变量名,却把他当字符串来看</li>
</ul>
</li>
<li><p>绑定class: </p>
<ul>
<li>{}代表是一个对象,key:value(这里面只能是boolean)</li>
<li>[]里面既可以写’’,也可以写变量名</li>
<li>函数名()可以调用函数</li>
</ul>
</li>
<li><p>绑定style:</p>
<ul>
<li>{}代表是一个对象key(属性名):vlaue(属性值)<ul>
<li>tip:     属性值必须要加单引号,否则当作变量名</li>
<li>变量的值必须带’’,否则又会变成变量名</li>
<li>key既可以用-,也可以用驼峰命名法</li>
</ul>
</li>
<li>[]里面既可以写’’,也可以写变量名<ul>
<li>数组里面只能写变量名,变量只能是对象,</li>
</ul>
</li>
<li>函数名()可以调用函数</li>
</ul>
</li>
<li><p>计算属性: </p>
<ul>
<li><p>函数也可以写在mustache语法中,要带()</p>
</li>
<li><p>computed: {}里定义的也是函数,由于是计算属性,尽量取名词</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.books);</span><br></pre></td></tr></table></figure>
</li>
<li><p>mustache中计算属性函数不用带()</p>
<ul>
<li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++)</span><br><span class="line">        result += <span class="built_in">this</span>.books[i].price;</span><br><span class="line">   <span class="keyword">return</span> result	</span><br></pre></td></tr></table></figure>
</li>
<li><p>获得的是每一个对象的索引</p>
</li>
<li>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.books)</span><br></pre></td></tr></table></figure>

<p>获得是每一个对象 </p>
</li>
<li><pre><code class="javascript">    computed: {
        fullName: {
            get: function(){

            },
            set: function()
            {

            }
        }
    }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    + 计算属性一般是没有属性的set方法的</span><br><span class="line">    </span><br><span class="line">    + 字符串实现.split(" ")</span><br><span class="line">    </span><br><span class="line">      + 计算属性,只调用了一次,对每次的第一次改变进行缓存,它的效率更高</span><br><span class="line">  </span><br><span class="line">+ let/var</span><br><span class="line"></span><br><span class="line">  + var的作用域为全局作用域,就算它在一个代码块之内,例如if和for循环之中,</span><br><span class="line">  + 闭包可以解决var变量为全局变量的情 况</span><br><span class="line"></span><br><span class="line">+ const</span><br><span class="line"></span><br><span class="line">  + 一旦给const赋值后,不能修改</span><br><span class="line">  + const定义表示标识符后,必须进行赋值</span><br><span class="line">  + const不能变换指向的对象,可以修改对象的内容</span><br><span class="line"></span><br><span class="line">+ SE6的对象增强写法</span><br><span class="line"></span><br><span class="line">  + ```javascript</span><br><span class="line">    	const obj = {</span><br><span class="line">            name: 'why',</span><br><span class="line">            age: 18</span><br><span class="line">        }</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>属性的增强写法:如果对象的属性等于变量名可以</p>
<ul>
<li><pre><code class="java">    const obj = {
        name,
        age,
    }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 方法的增强写法</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    	const obj = {</span><br><span class="line">            getFullName(){</span><br><span class="line">                </span><br><span class="line">            }</span><br><span class="line">        }</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>v-on:时间监听</p>
<ul>
<li><p>如果方法没有参数,()小括号可省略</p>
</li>
<li><p>如果方法需要一个参数,但监听器确不写(),默认会将event对象传入</p>
</li>
<li><p>方法定义时,需要event对象,同时,又需要其它的参数@click=”aa(123,$event)”</p>
</li>
<li><p>数字是不会被解析成变量名</p>
</li>
<li><p>v-on的修饰符</p>
<ul>
<li>阻止冒泡:@click.stop</li>
<li>阻止默认事件: @click.prevent</li>
<li>特定的键监听: @keyup.enter</li>
<li>自定义组件的监听: @ptn.native</li>
<li>只执行一次: @click.once</li>
</ul>
</li>
</ul>
</li>
<li><p>条件判断:</p>
<ul>
<li>v-if判断组件内的元素是否展示,写基本类型是不会当作变量,而是直接当作值</li>
<li>v-else同级变量之间,兄弟节点</li>
<li>v-else-if同样是同级变量之间</li>
<li>解决复用的方法:在组件后面添加key=”属性值”</li>
<li>v-show: <ul>
<li>与v-if的区别:会v-show是通过display属性来控制的,而v-if根本不会存在dom中</li>
<li>当在显示和隐藏切换很频繁时,使用v-show,如果只有一次切换,通过v-if</li>
</ul>
</li>
</ul>
</li>
<li><p>v-for:</p>
<ul>
<li>v-for=”item in names”;</li>
<li>v-for=”(item, index) in names”数组:小括号意味着元组,</li>
<li>v-for=”item in info”对象,item得到的是value,</li>
<li>v-for=”(value, key) in 对象”,重要的东西放在前面</li>
<li>v-for=”(value,key,index) in 对象”,最后一个是对象属性的索引</li>
<li>官方推荐:使用v-for时推荐使用key,key的值为item</li>
<li>js往数组中插入元素app.letters.splice(索引,要删除的元素的个数,’’元素)</li>
<li>js往数组末尾插入app.letters.push</li>
</ul>
</li>
<li><p>当vue得知vue内的数据发生变化后,会响应的渲染数据,并不是所有的方法能做到响应式,例如直接this.letters[0] = “sdf”,没有对其进行监听,但对this.letters[0].a++又有监听</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift():删除数组的第一个元素</li>
<li>unshift:在数组最前面添加一个或多个元素</li>
<li>splice:如果只有一个元素,删除到末尾,splice(1,2,’a’,’b’),把索引1,2索引的元素替换为”a’’,”b”</li>
<li>sort</li>
<li>reverse</li>
<li>可变参数function sum(…num),num实参的数组的表示符</li>
<li>Vue.set(this.letters,0,”bbbbbb’’)</li>
<li>点击列表,列表变红,每一个li有自己的index</li>
</ul>
</li>
<li><p>引入css&lt;link sytle=”sytle” ref</p>
</li>
<li><p>js文件中直接写代码,不用写&lt;script&gt;</p>
</li>
<li><p>保留两位小数.toFixed,过滤器,实例的filters: “{函数 showPrice(price)},{-{item | showPrice}-} “</p>
</li>
<li><p>js中小于等于&lt;=</p>
</li>
</ul>
<h2 id="javascript高阶函数"><a href="#javascript高阶函数" class="headerlink" title="javascript高阶函数"></a>javascript高阶函数</h2><ul>
<li>filter: 的回调函数,必须返回一个boolean值,当返回true时,会加入,当返回false时,不会加入数组let newNums = nums.filter(functiong (n){})</li>
<li>map: 对每一数组中的元素使用该函数</li>
<li>reduce: 对数组中所有的内容进行会总reduce(function(preValue, n), prev的初始初始化值),</li>
<li>箭头函数</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>commonjs和SE6模块化开发</title>
    <url>/2021/03/17/%E5%89%8D%E7%AB%AF/Vue/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="SE6模块"><a href="#SE6模块" class="headerlink" title="SE6模块"></a>SE6模块</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"你的模块"</span> <span class="attr">type</span>=<span class="string">module</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在模块导出和导入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> {</span><br><span class="line">	flag, sum</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> num1 = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1, num2</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'+++++'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认导出,自己不命名,让别人命名,默认导出只能有一个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> aaa</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'方法'</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {flag, sum} <span class="keyword">from</span> <span class="string">"路径"</span></span><br><span class="line"><span class="keyword">import</span> 自己的命名 <span class="keyword">from</span> <span class="string">"路径"</span></span><br><span class="line"><span class="comment">//统一全部导入,aa作为标识</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aa <span class="keyword">from</span> <span class="string">"路径"</span></span><br></pre></td></tr></table></figure>

<p>sum是键</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>组件的使用</title>
    <url>/2021/03/16/%E5%89%8D%E7%AB%AF/Vue/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="创建组件构造器"><a href="#创建组件构造器" class="headerlink" title="创建组件构造器"></a>创建组件构造器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpnC = Vue.extend({	</span><br><span class="line">    template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">				&lt;h2&gt;</span></span><br><span class="line"><span class="string">				&lt;/h2&gt;</span></span><br><span class="line"><span class="string">			&lt;div&gt;`</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure>

<p>`:用在SE6中可以更方便的使用换行,更加直观</p>
<h2 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"组件名"</span>, 组件的变量名)</span><br></pre></td></tr></table></figure>

<p>Vue组件必须放在Vue已经挂载的元素或子元素中</p>
<h2 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h2><ul>
<li>在&lt;script&gt;中注册,为全局组件</li>
<li>在vue中components: {组件名: 组件构造器}</li>
</ul>
<h2 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpnc2 = Vue.extend({</span><br><span class="line">    template: <span class="string">``</span>,</span><br><span class="line">    components: {</span><br><span class="line">        组件名: 组件构造器</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<p>el和template是替换关系</p>
<h2 id="注册组件的语法糖"><a href="#注册组件的语法糖" class="headerlink" title="注册组件的语法糖"></a>注册组件的语法糖</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(</span><br><span class="line">	组件名: {</span><br><span class="line">    	template: <span class="string">""</span></span><br><span class="line">    	component: {</span><br><span class="line">    		</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="组件模版抽离的方法"><a href="#组件模版抽离的方法" class="headerlink" title="组件模版抽离的方法"></a>组件模版抽离的方法</h2><ul>
<li>&lt;script type=”type/x-template” id=”cpn”&gt;</li>
<li>&lt;template id=”cpn”&gt;</li>
</ul>
<h2 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data()"></a>组件中的data()</h2><ul>
<li>组件不能访问Vue实例数据,就算被注册了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> {<span class="attr">title</span>:<span class="string">"aaa"</span>}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<ul>
<li>组件也有methods</li>
<li>为什么data必须是函数,实例化多个组件时,是分离的</li>
<li>如果必须要所有的对象都使用同一个值,返回一个在外部的对象,</li>
</ul>
<h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><ul>
<li>父组件-&gt;子组件:pass props<ul>
<li>子组件:props:  [‘属性名1’,’属性名2’]</li>
<li>父组件,v-bind:属性名=”父组件中的变量”</li>
<li>props: {属性名: 类型}</li>
<li>props: {属性名:{type: String, default: “aaaa”,requird: true}}</li>
<li>如若类型时Array和Object,必须把default改为函数,返回相应的类型</li>
</ul>
</li>
<li>props中的驼峰标识,通过:不能写驼峰,可以让-和驼峰配合</li>
<li>&lt;template&gt;必须包含一个根</li>
</ul>
<h2 id="子组件-gt-父组件-emit-event"><a href="#子组件-gt-父组件-emit-event" class="headerlink" title="子组件->父组件:$emit event"></a>子组件-&gt;父组件:$emit event</h2><ul>
<li>子组件:this.$emit(“自定义事件名”,对象)</li>
<li>父组件:@自定义时间名 ,最好别用驼峰</li>
<li>父组件:中的第一个参数默认为现在不是event</li>
<li>将string转化为int,*1和parseInt</li>
<li>watch:监听{属性名(新值,旧值)}</li>
</ul>
<h2 id="父子组件的访问方式"><a href="#父子组件的访问方式" class="headerlink" title="父子组件的访问方式:"></a>父子组件的访问方式:</h2><ul>
<li>父组件访问子组件:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="11.011ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4866.8 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(433, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1009, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1354, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1652, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(2172, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2623, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3089, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3966.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">或</text></g></g></g></svg></mjx-container>refs</li>
<li>子组件访问父组件:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="9.248ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4087.8 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1032, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1483, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1949, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2549, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(3187.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">或</text></g></g></g></svg></mjx-container>root</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>java刷题的知识</title>
    <url>/2021/04/06/%E5%8D%A1%E7%89%87/%E7%BC%96%E7%A8%8B/java%E5%88%B7%E9%A2%98%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ol>
<li>从标准流输入: Scanner scanner = new Scanner(System.in);</li>
<li>next[Int/Float…]: 会忽略前面的空格和换行符,从一个数字读取,<strong>会将空格和换行符留在输入的缓冲区内</strong></li>
<li>nextLine: 会读入一整行,包括其中的空格和换行符,开始读入新的一行时,<strong>注意用提前用nextLine读取上一行的换行符</strong></li>
<li>hasNext: 如果输入没有明确指明数量,要靠hasNext来检测EOF符号,来中断输入</li>
<li>读取单个字符: 只有通过nextLine读入一行或next读入一个字符串,后用**charAt()**方法读入</li>
<li>读入单个数字: 读入的字符后**- ‘0’**</li>
</ol>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol>
<li>java中static变量默认是<strong>零值</strong>,用不着再将其初始化为0,</li>
</ol>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol>
<li>对于基本类型的数组,使用Arrays.toList时**,List中的类型是基本类型数组**,对与引用类型的数组,List中才是引用类型</li>
<li>查找: Arrays.binarySearch()<ol>
<li>找得到: 索引</li>
<li>找不到:<ol>
<li>比任何一个值都小: -1</li>
<li>比任何一个值都大: -数组长度 + 1</li>
<li>中间: - 要插入的位置,(从左往右数第几个,从1开始)</li>
</ol>
</li>
</ol>
</li>
<li>二维数组初始化<ol>
<li>在定义的时候,可以直接**{-{-}-}**初始化</li>
<li>在new时必须<strong>new int[][]{new int[]{}-}</strong></li>
</ol>
</li>
<li>从List<integer>转为int[]: 只能重新new int[] 在填入</integer></li>
</ol>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ol>
<li>Comparable接口: 如果实现了,可以利用Collections.sort()或Arrays.sort()直接进行排序,<strong>从小到大进行排序</strong></li>
<li>Comparator接口: 配合匿名内部类,使用Collections.sort()或Arrays.sort()时可以让不具备比较能力的对象,<strong>具备比较能力</strong>,同样是从小到大进行排序</li>
</ol>
<h2 id="容器填充"><a href="#容器填充" class="headerlink" title="容器填充"></a>容器填充</h2><ol>
<li>使用构造器创建一个容器时,传入一个容器</li>
<li>容器实例.addAll(另外一容器)</li>
<li>Collections.addAll(容器,[数组/或多个用逗号分隔的值])</li>
</ol>
<h2 id="容器查找"><a href="#容器查找" class="headerlink" title="容器查找"></a>容器查找</h2><ol>
<li>Collecttions.min或max:可以查找一个无序容器内的最小值或最大值,使用时还可以传比较器,自定义大小</li>
</ol>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ol>
<li>append(): 如果是char类型添加<strong>字符</strong>,如果是int类型添加<strong>int的字面量</strong></li>
<li>equals(): StringBuilder没有<strong>重写</strong>equals方法</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>解决方法</tag>
      </tags>
  </entry>
  <entry>
    <title>java容器</title>
    <url>/2021/05/26/%E8%AF%AD%E8%A8%80/java/java%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="java容器"><a href="#java容器" class="headerlink" title="java容器"></a>java容器</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的特点"><a href="#数组的特点" class="headerlink" title="数组的特点"></a>数组的特点</h3><ol>
<li>一旦初始化了,容量不可以改变</li>
<li>一旦定义好后,数组里面元素的类型,就确定了(支持多态)</li>
</ol>
<h3 id="数组的弊端"><a href="#数组的弊端" class="headerlink" title="数组的弊端"></a>数组的弊端</h3><ol>
<li>容量固定</li>
<li>只能获取数组的容量,不能直接获取数组中元素的个数</li>
<li>对于插入和删除的效率不高</li>
</ol>
<h3 id="数组转Collection"><a href="#数组转Collection" class="headerlink" title="数组转Collection"></a>数组转Collection</h3><p>Arrays.asList: </p>
<ol>
<li>如果参数是基本类型的数组,只会被看成一个数组,</li>
<li>如果是引用数组则可以看成多个元素,通常用于,已经声明的数组转Collection</li>
<li>这个函数的参数是不定长参数,可以直接写多个引用对象,通常用于创建一个Collection,用于去填充另外一个Collection</li>
<li>这个方法创建的Collecion不能进行能修改其长度的操作,因为这个list本质还是一个数组</li>
</ol>
<h2 id="java集合框架"><a href="#java集合框架" class="headerlink" title="java集合框架"></a>java集合框架</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul>
<li><p>List</p>
<ul>
<li>ArrayList</li>
<li>LinkedList</li>
<li>Vector</li>
</ul>
</li>
<li><p>Set</p>
<ul>
<li><p>HashSet</p>
<ul>
<li>LinkedHashSet</li>
</ul>
</li>
<li><p>TreeSet</p>
</li>
</ul>
</li>
<li><p>Queue</p>
<ul>
<li>Deque</li>
</ul>
</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li><p>HashMap</p>
<ul>
<li>LinkedHashMap</li>
</ul>
</li>
<li><p>TreeMap</p>
</li>
<li><p>Hashtable</p>
<ul>
<li>Properties</li>
</ul>
</li>
</ul>
<h2 id="Collection的方法"><a href="#Collection的方法" class="headerlink" title="Collection的方法"></a>Collection的方法</h2><ul>
<li><p>增加: add, addAll</p>
</li>
<li><p>删除: remove, removeAll, retainAll, clear</p>
</li>
<li><p>包含: contains, containsAll</p>
</li>
<li><p>大小: size</p>
</li>
<li><p>是否为空: isEmpty</p>
</li>
<li><p>转数组: toArray</p>
<ul>
<li><p>不传参数,默认是Object数组</p>
</li>
<li><p>传对象数组,则转为对象数组</p>
</li>
<li><p>转数组的方法无法转成基本类型数组</p>
</li>
</ul>
</li>
<li><p>迭代: iterator</p>
<ul>
<li>实现了iterable接口,必须要实现iterator方法</li>
<li>实现iterable接口,是增强for/in的充分不必要条件,数组 没有实现iterable接口仍可以使用增减for/in</li>
</ul>
</li>
<li><p>重写Object: equals, toString, hashCode</p>
<ul>
<li>equals:List要求元素顺序相同, Set不要求元素顺序相同</li>
</ul>
</li>
</ul>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>为容器提供一种统一的遍历方式,同时又不暴露容器内部实现细节</p>
<h3 id="拥有的方法"><a href="#拥有的方法" class="headerlink" title="拥有的方法"></a>拥有的方法</h3><p>hasNext, next, remove</p>
<ul>
<li><p>remove已经被默认实现了,不用再被实现</p>
</li>
<li><p>IllegalException:</p>
<ul>
<li>如果不掉用next方法就使用remove</li>
<li>如果已经调用了remove,接着再调用remove</li>
</ul>
</li>
</ul>
<h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><p>特点: 有序,可重复</p>
<p>实现类: ArrayList,LinkedList,Vector</p>
<h3 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h3><ul>
<li>三者的相同: 存储特点都是有序,可重复,都实现了List接口</li>
<li>ArrayList和Vector的异同: <ul>
<li>相同: 底层都是用数组实现的,</li>
<li>不同: ArrayList是从jdk1.2开始才有的,Vector从1.0就有了,ArrayList是线程不安全的,效率高,Vector是线程安全的,效率低,在jdk1.7版本中,使用默认构造器,都会直接创建一个10大小的数组,但在1.8中,ArrayList数组的创建被推迟到放入第一个元素时.在扩容时,ArrayList的大小变为原来的1.5倍,如果容量扩容后还是不够,则容量直接变为能容下元素的大小,Vector的大小在不使用增长量的时候,大小变为原来的2倍,如果容量扩容后还是不够,则容量同样是直接变为能容下元素的大小.为了避免他们两者的扩容带来的性能损耗,可以在构造时指定大小</li>
<li>tip: StringBuffer中的数组是变为原来的2倍+2</li>
</ul>
</li>
<li>ArrayList和LinkedList的异同:<ul>
<li>相同: 都是从jdk1.2才开始出现</li>
<li>不同: ArrayList底层使用数组实现的,对于查找效率,比较高,但对于删除和插入效率比较低,每次删除和插入元素,都会导致数组内其它元素的前移和后移,导致性能消耗,LinkedList底层使用的是双向链表,拥有一个静态内部类Node,和两个Node的成员变量作为头指针和尾指针,对于查找效率较低,但对于插入和删除效率较高,只需要修改前后节点的指针</li>
</ul>
</li>
</ul>
<h3 id="List接口的方法"><a href="#List接口的方法" class="headerlink" title="List接口的方法"></a>List接口的方法</h3><p>因为List接口是有序的,所以List在Collection接口基础上增加了一些关于索引的方法</p>
<ul>
<li>增加: add(int index, Object ele), addAll(int index, Collection coll)</li>
<li>删除: remove(int index)<ul>
<li>这个方法必须传基本数据类型</li>
</ul>
</li>
<li>修改: set(int index, Object o)</li>
<li>查找: get(int index), IndexOf(Object o), lastIndexOf(Object o)</li>
<li>切分: subList(int fromIndex, int toIndex)<ul>
<li>左边右开, 返回一个新的List, 不会对原本的List进行修改</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
