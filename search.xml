<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Router的使用</title>
    <url>/2021/03/18/%E5%89%8D%E7%AB%AF/Vue/Router/</url>
    <content><![CDATA[<h2 id="后端路由和前端路由"><a href="#后端路由和前端路由" class="headerlink" title="后端路由和前端路由"></a>后端路由和前端路由</h2><ul>
<li>后端路由和后端渲染:jsp</li>
<li>前后端分离和前端渲染:ajax</li>
<li>单页面富应用和前端路由:SPA</li>
</ul>
<h2 id="改变URl中的值而界面不刷新"><a href="#改变URl中的值而界面不刷新" class="headerlink" title="改变URl中的值而界面不刷新"></a>改变URl中的值而界面不刷新</h2><ul>
<li>location.hash = ‘aaa’</li>
<li>history.pushState({},’’, ‘home’)</li>
<li>history.back()</li>
<li>history.forward()</li>
<li>history.replaceState({},’’, ‘about’)</li>
<li>history.go(-1) 等同于history.back</li>
<li>history.go(1)等同于history.forward</li>
</ul>
<h2 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h2><ul>
<li>npm install vue-router –save</li>
<li>import Vue from ‘vue’</li>
<li>import VueRouter from ‘vue-router’</li>
<li>Vue.use(VueRouter),传入插件</li>
<li>const router = new VueRouter({routes: []})</li>
<li>import router from ‘./router’</li>
<li>在App中挂载</li>
</ul>
<h2 id="使用vue-router"><a href="#使用vue-router" class="headerlink" title="使用vue-router"></a>使用vue-router</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routers = [</span><br><span class="line">    {</span><br><span class="line">        path: <span class="string">'/home'</span>,</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        path: <span class="string">'about'</span>,</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'home'</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改默认路径</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">	redirect: <span class="string">'/home'</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<ul>
<li>history模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router(</span><br><span class="line">{</span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">'history'</span></span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<ul>
<li>router-link的属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">'/home'</span> <span class="attr">tag</span>=<span class="string">'button'</span> <span class="attr">replace</span> <span class="attr">class</span>=<span class="string">"router-link-active"</span> <span class="attr">active-class</span>=<span class="string">'active'</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由里</span></span><br><span class="line">linkActiveClass: <span class="string">'active'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过代码的形式去修改路径</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">'/home'</span>);</span><br><span class="line"><span class="built_in">this</span>.$router.replace(<span class="string">'/about'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    path: <span class="string">'/user/:abc'</span>,</span><br><span class="line">    component: User</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user/'+userId"</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哪一个路由处于活跃状态,就拿到哪个,方法中的写法</span></span><br><span class="line"><span class="built_in">this</span>.$route.params.abc</span><br><span class="line"><span class="comment">//写在mustache中</span></span><br><span class="line">$router.params.abc</span><br></pre></td></tr></table></figure>

<h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><ul>
<li>app.js:当前应用程序开发的所有代码(业务代码)</li>
<li>manifest.js:为打包的代码做底层支撑</li>
<li>vendor.js:提供第三方vue,router,axios</li>
</ul>
<p>路由懒加载,一个路由打包一个js,只有当用到的时候才会下载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../compents/Home"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">"../component/Home"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path: <span class="string">'/home'</span>,</span><br><span class="line">component: Home,</span><br><span class="line">children: [</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//子路径前不要加/</span></span><br><span class="line">        path: <span class="string">'news'</span>,</span><br><span class="line">        component: HomeNews</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--to中必须写全路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/news"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><ul>
<li>params:类型,路径参数,参数较少</li>
<li>query:类型?查询(查询中用&amp;分隔参数),大量的参数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{path: '/profile', query: {name: '55555'}}"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    {{$route.query.name}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push({</span><br><span class="line">    path: <span class="string">'/profile'</span>,</span><br><span class="line">  	query: {</span><br><span class="line">        name: <span class="string">'55555'</span></span><br><span class="line">    }  </span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="router和route"><a href="#router和route" class="headerlink" title="router和route"></a>router和route</h2><ul>
<li>router是整个router对象</li>
<li>route是当前活跃的路径的对象</li>
<li>用插件要使用Vue.use(插件名),相当于插件.install</li>
<li>注册时用大写,使用是用-</li>
<li>所有的组件都继承自vue的原型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype.name = <span class="string">"哈哈"</span></span><br></pre></td></tr></table></figure>

<h2 id="全局导航守卫"><a href="#全局导航守卫" class="headerlink" title="全局导航守卫"></a>全局导航守卫</h2><ul>
<li>created()</li>
<li>mounted()</li>
<li>updated()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在route中加上元数据</span></span><br><span class="line">meta{</span><br><span class="line">    title: <span class="string">'首页'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//router中写</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//必须调用next</span></span><br><span class="line">    <span class="comment">//为什么有match[0],只在第一层的路径进行了匹配</span></span><br><span class="line">    doucument.title = to.matched[<span class="number">0</span>].title</span><br><span class="line">    next(),</span><br><span class="line">})</span><br><span class="line"> </span><br><span class="line"><span class="comment">//后置钩子,不需要主动调用next</span></span><br><span class="line">afterEach</span><br></pre></td></tr></table></figure>

<h2 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h2><ul>
<li><p>在route中配</p>
<h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2></li>
<li><p>在组件中配</p>
</li>
</ul>
<h2 id="Vue-keep-alive"><a href="#Vue-keep-alive" class="headerlink" title="Vue-keep-alive"></a>Vue-keep-alive</h2><ul>
<li>keep-alive是Vue内置的一个组件,可以时被包含的组件,不被渲染,离开时不会被销毁,回来时不会被创建</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使以前的状态的得到保存,使用组件内守卫</p>
<p>beforeRouteLeave,在离开之前,得到保存</p>
<p>activated()和deactived()只有在keep-alive时,才是有效的</p>
<ul>
<li>keep-alive:include使用正则,只有满足条件的该正则的的名字的组件才会有用,exclude会排除,正则中不要随便加空格</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章发布</title>
    <url>/2021/03/11/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Hexo/</url>
    <content><![CDATA[<h1 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h1><ol>
<li>cd 55555Blog</li>
<li>hexo new [-p 路径] 文章的标题</li>
<li>hexo c</li>
<li>hexo g</li>
<li>hexo d</li>
</ol>
<h2 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h2><ul>
<li>文件头的描述信息的：的后面必须有空格</li>
<li>路径的相对位置是source/_post，路径中没有的文件夹将自动创建，最后一个为文件名，会被自动加上.md</li>
<li>第5,6步可联合写成 hexo g -d</li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>认识Node</title>
    <url>/2021/03/22/%E5%89%8D%E7%AB%AF/Node/%E8%AE%A4%E8%AF%86Nodejs/</url>
    <content><![CDATA[<h2 id="什么是Node"><a href="#什么是Node" class="headerlink" title="什么是Node"></a>什么是Node</h2><ul>
<li>是javaScript运行时环境,可以使js脱离浏览器执行</li>
</ul>
<p>浏览器中的javaScripte</p>
<ul>
<li>EcmaScript(js的语法)</li>
<li>BOM</li>
<li>DOM</li>
</ul>
<p>Node.js中的javaScript</p>
<ul>
<li>EcmaScript(js的语法)</li>
<li>提供了一些服务器级别的操作API<ul>
<li>文件读写</li>
<li>服务网络的构建</li>
<li>网络通信</li>
<li>http服务器</li>
</ul>
</li>
</ul>
<p>npm是包管理工具</p>
<h2 id="Node-js能做什么"><a href="#Node-js能做什么" class="headerlink" title="Node.js能做什么"></a>Node.js能做什么</h2><ul>
<li>web服务器后台</li>
<li>命令行工具(就像npm,git,hexo)</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在html中使用vue</title>
    <url>/2021/03/14/%E5%89%8D%E7%AB%AF/Vue/HelloVuejs%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="Vue-js的导入"><a href="#Vue-js的导入" class="headerlink" title="Vue.js的导入"></a>Vue.js的导入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过js导入vue.js的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"相对该文件的vue.js位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	   	<span class="comment">//在SE6语法中定义变量用const(常量)和let(变量)关键字代替var</span></span></span><br><span class="line"><span class="javascript">       	<span class="comment">//将把id为app的元素挂载到app对象,对div元素中的message进行替换</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: {</span><br><span class="line"><span class="javascript">            	message: <span class="string">"hello world"</span></span></span><br><span class="line">        }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解:</p>
<ul>
<li>html注释:&lt;!– –&gt;</li>
<li>javascript注释://</li>
</ul>
<h2 id="Vue列表的展示"><a href="#Vue列表的展示" class="headerlink" title="Vue列表的展示"></a>Vue列表的展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in movies"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">"相对该文件的vue.js位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Aue({</span></span><br><span class="line"><span class="javascript">        	el: <span class="string">"#id"</span>,</span></span><br><span class="line">        	data: {</span><br><span class="line"><span class="javascript">       			movies: [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>]</span></span><br><span class="line">        	}</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue计数器的展示"><a href="#Vue计数器的展示" class="headerlink" title="Vue计数器的展示"></a>Vue计数器的展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前计数: {{counter}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;button v-on:click="counter++"&gt;+&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;button v-on:click="counter&amp;#45;&amp;#45;"&gt;-&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line">        data: {</span><br><span class="line">            counter: 0</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"add被执行"</span>)</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            sub: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"sub被执行"</span>)</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>@是v-on:的语法糖,也就是简写,</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol>
<li><ul>
<li>Q: 什么时候使用{--{}–},什么时候不使用</li>
<li>在标签的内容中使用,属性里面不能写</li>
</ul>
</li>
<li><ul>
<li>Q: this到底指向的是哪个对象,为什么要使用this </li>
<li>A: this指向的app的对象,使用this还没有创建app对象,需要指定??</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue脚手架的使用</title>
    <url>/2021/03/18/%E5%89%8D%E7%AB%AF/Vue/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h2><ul>
<li>CLI是Command-Line Interface,翻译为命令行界面</li>
<li>拉取2.x模版,npm install -g @vue/cli-init ,vue init webpack my-project(注意代理的问题)</li>
<li>创建脚手架3 vue create my-project</li>
<li>创建脚手架4和3差别不大</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li>为JS在浏览器外提供了运行时环境</li>
<li>node js文件:可以运行js文件</li>
</ul>
<h2 id="修改Vue-CLI的配置"><a href="#修改Vue-CLI的配置" class="headerlink" title="修改Vue CLI的配置"></a>修改Vue CLI的配置</h2><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li>是一种定义函数的方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//一个参数的时候前面的括号可以省略</span></span><br><span class="line"><span class="keyword">const</span> power = <span class="function"><span class="params">num</span> =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> num * num;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//函数代码块只有一行代码</span></span><br><span class="line"><span class="keyword">const</span> mul = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 * num2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有返回值, 返回值为undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>箭头函数一般会在传函数的时候的使用</li>
<li>箭头函数的this,引用的是最近,向外层作用查找</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>网络模块的封装</title>
    <url>/2021/03/20/%E5%89%8D%E7%AB%AF/Vue/axios/</url>
    <content><![CDATA[<h2 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认前况下是get请求</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">''</span>;</span><br><span class="line">axios.defaults.timeout = <span class="number">5</span> </span><br><span class="line">axios({</span><br><span class="line">    baseURL: <span class="string">''</span>,</span><br><span class="line">    timeout: </span><br><span class="line">    url: </span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    <span class="comment">//针对get请求的拼接</span></span><br><span class="line">    params: {</span><br><span class="line">    </span><br><span class="line">	},</span><br><span class="line">     data: {</span><br><span class="line">      </span><br><span class="line">      }</span><br><span class="line">}).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios发送并发请求</span></span><br><span class="line">axios.all([axios(), axios()]).then(<span class="function"><span class="params">results</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(results)</span><br><span class="line">})</span><br><span class="line"><span class="comment">//数组的解构</span></span><br><span class="line">int [name1,name2,name3] = array</span><br></pre></td></tr></table></figure>

<p>axio是支持Promise的</p>
<h2 id="axios的配置"><a href="#axios的配置" class="headerlink" title="axios的配置"></a>axios的配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(</span><br><span class="line">{</span><br><span class="line">    baseURL: <span class="string">''</span></span><br><span class="line">    timeout: <span class="number">5000</span> </span><br><span class="line">   </span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="axios的拦截器"><a href="#axios的拦截器" class="headerlink" title="axios的拦截器"></a>axios的拦截器</h2><ul>
<li>比如每次发送网络请求时,都希望在界面中显示请求图标</li>
<li>某些网络请求(比如登陆(token)),必须携带一些特殊信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> {<span class="built_in">console</span>.log(config); <span class="keyword">return</span> config}, <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">instance.intercepts.use(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}, <span class="function"><span class="params">err</span> =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">}) </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>v-model的使用</title>
    <url>/2021/03/16/%E5%89%8D%E7%AB%AF/Vue/v-model/</url>
    <content><![CDATA[<h2 id="v-model的基本使用"><a href="#v-model的基本使用" class="headerlink" title="v-model的基本使用"></a>v-model的基本使用</h2><ul>
<li>input</li>
<li>Textarea</li>
</ul>
<h2 id="v-model的原理"><a href="#v-model的原理" class="headerlink" title="v-model的原理"></a>v-model的原理</h2><ul>
<li>可以通过v-bind和v-on实现双向绑定</li>
<li>event在方法内不使用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="19.332ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 8544.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(444.7, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">在</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">元</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">素</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">的</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">属</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">性</text><text data-variant="normal" transform="translate(5400, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">类</text><text data-variant="normal" transform="translate(6300, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">要</text><text data-variant="normal" transform="translate(7200, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">写</text></g></g></g></svg></mjx-container></li>
</ul>
<h2 id="v-model结合radio类型"><a href="#v-model结合radio类型" class="headerlink" title="v-model结合radio类型"></a>v-model结合radio类型</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">vlaue</span>=<span class="string">要发送的值</span> <span class="attr">v-model</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>name相同代表同一组值,如果v-model的变量名是系统的就代表同一组,这时可以省略name</li>
</ul>
<h2 id="v-model结合checkbox类型"><a href="#v-model结合checkbox类型" class="headerlink" title="v-model结合checkbox类型"></a>v-model结合checkbox类型</h2> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">v-model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定到checkbox单选框</li>
<li>绑定到checkbox多选框</li>
<li>&lt;label&gt; 标签的 for 属性应当与相关元素的 id 属性相同,有可能也需要在前面加:</li>
</ul>
<h2 id="v-model结合select类型"><a href="#v-model结合select类型" class="headerlink" title="v-model结合select类型"></a>v-model结合select类型</h2><ul>
<li>单选下拉框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span> = <span class="string">"abc"</span> <span class="attr">v-modle</span>=<span class="string">"变量名"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>下拉多选框,在select 中添加multiple,v-model绑定的是数组变量</li>
</ul>
<h2 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h2><ul>
<li>lazy,回车或失去焦点之后,才会改变data里面的变量</li>
<li>number,把文本转化为number类型</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>+ trim,去除前后的空格</code></pre>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>slot的使用</title>
    <url>/2021/03/16/%E5%89%8D%E7%AB%AF/Vue/slot/</url>
    <content><![CDATA[<h2 id="slot预留标签"><a href="#slot预留标签" class="headerlink" title="slot预留标签"></a>slot预留标签</h2><ul>
<li>使用在组件标签内使用被的标签,可以在内使用多个</li>
<li>在slot标签内预留一个默认的值</li>
</ul>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认替换的没有属性的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">""</span>&gt;</span>text&lt;\span&gt;</span><br></pre></td></tr></table></figure>

<h2 id="编译的作用域"><a href="#编译的作用域" class="headerlink" title="编译的作用域"></a>编译的作用域</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spn</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">spn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>一开始把子组件当作普通的元素,用的是父组件的模版</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span> = <span class="string">"item in xxx.data"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack的使用</title>
    <url>/2021/03/17/%E5%89%8D%E7%AB%AF/Vue/webpack/</url>
    <content><![CDATA[<h2 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h2><p>webpack是现代的javaScript应用的静态模块打包工具,webpack,nodejs,npm之间的关系</p>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p>npm insall <a href="mailto:&#119;&#x65;&#98;&#112;&#97;&#x63;&#x6b;&#x40;&#51;&#46;&#x36;&#46;&#x30;">webpack@3.6.0</a> -g全局安装</p>
<h2 id="使用Webpack"><a href="#使用Webpack" class="headerlink" title="使用Webpack"></a>使用Webpack</h2><ul>
<li> webpack ./src/main.js ./dist/bundle.js</li>
<li>index.html中引入/bundle.js文件</li>
</ul>
<h2 id="web的配置"><a href="#web的配置" class="headerlink" title="web的配置"></a>web的配置</h2><ul>
<li><p>创建webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">//错误写法path: './dist',</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">        filename:  <span class="string">'bundle.s'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</li>
<li><p>path必须是一个绝对路径,动态获取路径</p>
</li>
<li><p>npm init 可以创建package.json</p>
</li>
<li><p>以下可以直接写 webpack</p>
</li>
<li><p>npm run “在package.json中script中的脚本”</p>
</li>
<li><p>在本地安装 npm install <a href="mailto:&#119;&#x65;&#x62;&#112;&#97;&#99;&#x6b;&#64;&#x33;&#x2e;&#x36;&#x2e;&#x30;">webpack@3.6.0</a> –save-dev,</p>
</li>
<li><p>webpack是开发时依赖,在devDependencies</p>
</li>
<li><p>Dependendcies是运行时依赖</p>
</li>
<li><p>只要在terminal中敲webpack用的都是全局的</p>
</li>
<li><p>写了脚本,会优先用本地的</p>
</li>
</ul>
<h2 id="模块化CSS"><a href="#模块化CSS" class="headerlink" title="模块化CSS"></a>模块化CSS</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./css/normal.css"</span>)</span><br></pre></td></tr></table></figure>

<p>安装npm install –save-dev css-loader,只负责加载,但不负责,加载到DOM</p>
<p>use: []是从有往左加载的</p>
<p>加载大于限制的路径时,要在webpack.config.js文件中配置,publicPath: ‘dist/‘</p>
<p>将图片防止特定位置</p>
<ul>
<li>在url-loader中配置option: name: ‘img/[name].[hash:8].[ext]’</li>
</ul>
<h2 id="ES6语法处理"><a href="#ES6语法处理" class="headerlink" title="ES6语法处理"></a>ES6语法处理</h2><p>npm install –save-dev babel-loader@7 label-core-preset-es2015</p>
<h2 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h2><ul>
<li>在js文件中import 命名 from “vue”,这时默认去node_modules</li>
<li>安装: npm install vue –save</li>
<li>runtime-only:代码中,不可以有任何的template</li>
<li>runtime-compiler:代码中,可以包含compiler,compiler可以编译template</li>
<li>在moduel的同级中配置resolve:{alias: {‘vue$’: ‘vue/dist/vue.esm.js’}}</li>
</ul>
<h2 id="template和el关系"><a href="#template和el关系" class="headerlink" title="template和el关系"></a>template和el关系</h2><p>一旦定义了template会将替换掉挂载的元素</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>tabbar</title>
    <url>/2021/03/19/%E5%89%8D%E7%AB%AF/Vue/tabbar%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="给路径取别名"><a href="#给路径取别名" class="headerlink" title="给路径取别名"></a>给路径取别名</h2><ul>
<li>@: 相当于src</li>
<li>在src等不需要import的路径必须加在最前面~</li>
</ul>
<h2 id="Promies是一种异步编程机制"><a href="#Promies是一种异步编程机制" class="headerlink" title="Promies是一种异步编程机制"></a>Promies是一种异步编程机制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {<span class="built_in">console</span>.log(<span class="string">"hello world"</span>)}, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        resolve()</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">}).then(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">//处理代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            resolve()</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="什么时候使用Promise"><a href="#什么时候使用Promise" class="headerlink" title="什么时候使用Promise"></a>什么时候使用Promise</h2><ul>
<li><p>一般情况下是有异步操作进行封装</p>
</li>
<li><p>调用resolve进then,调用reject进catch</p>
</li>
</ul>
<p>Promise有三种状态</p>
<ul>
<li>Pending: 等待</li>
<li>fulfiled: resolve</li>
<li>reject: catch</li>
</ul>
<p>在then中传入两个函数可以省略catch,如果Promise中用不到reject,可以省略reject函数 </p>
<p> Promise的简写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res + <span class="string">" "</span>)</span><br><span class="line"><span class="comment">//省略掉Promise.resolve</span></span><br><span class="line"><span class="keyword">return</span> res + <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err + <span class="string">" "</span>)</span><br><span class="line">thows <span class="string">'err'</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise的ALL"><a href="#Promise的ALL" class="headerlink" title="Promise的ALL"></a>Promise的ALL</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {}), <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> )]).then(<span class="function"><span class="params">results</span> =&gt;</span>	{</span><br><span class="line">  <span class="comment">//results是数组</span></span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<h2 id="Vuex的作用"><a href="#Vuex的作用" class="headerlink" title="Vuex的作用"></a>Vuex的作用</h2><ul>
<li><p>Vuex是一个专为Vue.js应用程序开发的状态管理模式</p>
</li>
<li><p>可以使用Vue.prototype实现Vuex,但这种实现方法不是响应式的</p>
</li>
<li><p>action:进行的是异步操作(后端操作)</p>
</li>
<li><p>Mutations:可以进行同步操作</p>
</li>
</ul>
<h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><ul>
<li>State: 单一状态树,单例模式</li>
<li>Getters: 类似于计算属性,使用$store.getters.powCounter,more20stu(state, getters ) {return getters.morestu.length}),powerCouter(state){};moreAgeStu(state){return function (age){return 功能}}</li>
<li>Mutations: $store.commit(‘方法名’)<ul>
<li>第一个参数就是state,第二参数是传过来的参数</li>
<li>参数被称为mutationg的载荷payload</li>
<li>commit的两种提交风格,commit({})</li>
<li>mutation的响应规则,观察者模式,一开始定义的,当属性发生变化时,会通知所有利用该属性的界面发生变化,新增加的属性以info[addres],不会是响应式的,但set可以,Vue.set(state.info,键,值),也可以是数组,delete state.info.age可以删掉属性,该方式也不能做到响应式,Vue.delete(state.info, ‘age’),splice是操作数组的</li>
<li>常量当作方法名: [导入的常量]</li>
</ul>
</li>
<li>Action: 在这当中使用异步操作,可以让chrome中的插件正常进行跟踪,函数的第一参数不在是state了,是context,相当于store,调用context.commit<ul>
<li>this.$store.dispatch(“方法名”, 参数).then(res =&gt; {console.log()})</li>
</ul>
</li>
<li>Modules: </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">modules: {</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">}</span><br><span class="line"><span class="comment">//使用属性</span></span><br><span class="line"><span class="built_in">this</span>.$store.a.name</span><br><span class="line"><span class="comment">//mutations</span></span><br><span class="line"><span class="built_in">this</span>.$strore.commit()</span><br><span class="line"><span class="comment">//跨越式得到跟的root</span></span><br><span class="line"><span class="function"><span class="title">fullname3</span>(<span class="params">state, getters,rootState</span>)</span>{</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"><span class="comment">//action中的context,只会调用自己模块中的commit</span></span><br><span class="line"><span class="comment">//对象的结构</span></span><br><span class="line"><span class="keyword">const</span> {name, height, age} = obj</span><br></pre></td></tr></table></figure>

<h2 id="store的结构"><a href="#store的结构" class="headerlink" title="store的结构"></a>store的结构</h2><p>state主文件中,getters,actions,mutations在各自在单独的js文件中</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>mustache</title>
    <url>/2021/03/14/%E5%89%8D%E7%AB%AF/Vue/%E6%8F%92%E5%80%BC%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法:"></a>Mustache语法:</h2><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><ul>
<li>可以和属性选择器配合display:none</li>
</ul>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul>
<li><p>属性里面的值变成了变量名</p>
<ul>
<li>如果属性是一个字符串,只能使用这一种方法,不能用{}语法和[]语法,但可以用函数名()返回单个值</li>
<li>只有在vue中挂载了元素,element才能生效</li>
<li>element的span有些奇怪,12应该是变量名,却把他当字符串来看</li>
</ul>
</li>
<li><p>绑定class: </p>
<ul>
<li>{}代表是一个对象,key:value(这里面只能是boolean)</li>
<li>[]里面既可以写’’,也可以写变量名</li>
<li>函数名()可以调用函数</li>
</ul>
</li>
<li><p>绑定style:</p>
<ul>
<li>{}代表是一个对象key(属性名):vlaue(属性值)<ul>
<li>tip:     属性值必须要加单引号,否则当作变量名</li>
<li>变量的值必须带’’,否则又会变成变量名</li>
<li>key既可以用-,也可以用驼峰命名法</li>
</ul>
</li>
<li>[]里面既可以写’’,也可以写变量名<ul>
<li>数组里面只能写变量名,变量只能是对象,</li>
</ul>
</li>
<li>函数名()可以调用函数</li>
</ul>
</li>
<li><p>计算属性: </p>
<ul>
<li><p>函数也可以写在mustache语法中,要带()</p>
</li>
<li><p>computed: {}里定义的也是函数,由于是计算属性,尽量取名词</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.books);</span><br></pre></td></tr></table></figure>
</li>
<li><p>mustache中计算属性函数不用带()</p>
<ul>
<li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++)</span><br><span class="line">        result += <span class="built_in">this</span>.books[i].price;</span><br><span class="line">   <span class="keyword">return</span> result	</span><br></pre></td></tr></table></figure>
</li>
<li><p>获得的是每一个对象的索引</p>
</li>
<li>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> <span class="built_in">this</span>.books)</span><br></pre></td></tr></table></figure>

<p>获得是每一个对象 </p>
</li>
<li><pre><code class="javascript">    computed: {
        fullName: {
            get: function(){

            },
            set: function()
            {

            }
        }
    }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    + 计算属性一般是没有属性的set方法的</span><br><span class="line">    </span><br><span class="line">    + 字符串实现.split(" ")</span><br><span class="line">    </span><br><span class="line">      + 计算属性,只调用了一次,对每次的第一次改变进行缓存,它的效率更高</span><br><span class="line">  </span><br><span class="line">+ let/var</span><br><span class="line"></span><br><span class="line">  + var的作用域为全局作用域,就算它在一个代码块之内,例如if和for循环之中,</span><br><span class="line">  + 闭包可以解决var变量为全局变量的情 况</span><br><span class="line"></span><br><span class="line">+ const</span><br><span class="line"></span><br><span class="line">  + 一旦给const赋值后,不能修改</span><br><span class="line">  + const定义表示标识符后,必须进行赋值</span><br><span class="line">  + const不能变换指向的对象,可以修改对象的内容</span><br><span class="line"></span><br><span class="line">+ SE6的对象增强写法</span><br><span class="line"></span><br><span class="line">  + ```javascript</span><br><span class="line">    	const obj = {</span><br><span class="line">            name: 'why',</span><br><span class="line">            age: 18</span><br><span class="line">        }</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>属性的增强写法:如果对象的属性等于变量名可以</p>
<ul>
<li><pre><code class="java">    const obj = {
        name,
        age,
    }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 方法的增强写法</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    	const obj = {</span><br><span class="line">            getFullName(){</span><br><span class="line">                </span><br><span class="line">            }</span><br><span class="line">        }</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>v-on:时间监听</p>
<ul>
<li><p>如果方法没有参数,()小括号可省略</p>
</li>
<li><p>如果方法需要一个参数,但监听器确不写(),默认会将event对象传入</p>
</li>
<li><p>方法定义时,需要event对象,同时,又需要其它的参数@click=”aa(123,$event)”</p>
</li>
<li><p>数字是不会被解析成变量名</p>
</li>
<li><p>v-on的修饰符</p>
<ul>
<li>阻止冒泡:@click.stop</li>
<li>阻止默认事件: @click.prevent</li>
<li>特定的键监听: @keyup.enter</li>
<li>自定义组件的监听: @ptn.native</li>
<li>只执行一次: @click.once</li>
</ul>
</li>
</ul>
</li>
<li><p>条件判断:</p>
<ul>
<li>v-if判断组件内的元素是否展示,写基本类型是不会当作变量,而是直接当作值</li>
<li>v-else同级变量之间,兄弟节点</li>
<li>v-else-if同样是同级变量之间</li>
<li>解决复用的方法:在组件后面添加key=”属性值”</li>
<li>v-show: <ul>
<li>与v-if的区别:会v-show是通过display属性来控制的,而v-if根本不会存在dom中</li>
<li>当在显示和隐藏切换很频繁时,使用v-show,如果只有一次切换,通过v-if</li>
</ul>
</li>
</ul>
</li>
<li><p>v-for:</p>
<ul>
<li>v-for=”item in names”;</li>
<li>v-for=”(item, index) in names”数组:小括号意味着元组,</li>
<li>v-for=”item in info”对象,item得到的是value,</li>
<li>v-for=”(value, key) in 对象”,重要的东西放在前面</li>
<li>v-for=”(value,key,index) in 对象”,最后一个是对象属性的索引</li>
<li>官方推荐:使用v-for时推荐使用key,key的值为item</li>
<li>js往数组中插入元素app.letters.splice(索引,要删除的元素的个数,’’元素)</li>
<li>js往数组末尾插入app.letters.push</li>
</ul>
</li>
<li><p>当vue得知vue内的数据发生变化后,会响应的渲染数据,并不是所有的方法能做到响应式,例如直接this.letters[0] = “sdf”,没有对其进行监听,但对this.letters[0].a++又有监听</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift():删除数组的第一个元素</li>
<li>unshift:在数组最前面添加一个或多个元素</li>
<li>splice:如果只有一个元素,删除到末尾,splice(1,2,’a’,’b’),把索引1,2索引的元素替换为”a’’,”b”</li>
<li>sort</li>
<li>reverse</li>
<li>可变参数function sum(…num),num实参的数组的表示符</li>
<li>Vue.set(this.letters,0,”bbbbbb’’)</li>
<li>点击列表,列表变红,每一个li有自己的index</li>
</ul>
</li>
<li><p>引入css&lt;link sytle=”sytle” ref</p>
</li>
<li><p>js文件中直接写代码,不用写&lt;script&gt;</p>
</li>
<li><p>保留两位小数.toFixed,过滤器,实例的filters: “{函数 showPrice(price)},{-{item | showPrice}-} “</p>
</li>
<li><p>js中小于等于&lt;=</p>
</li>
</ul>
<h2 id="javascript高阶函数"><a href="#javascript高阶函数" class="headerlink" title="javascript高阶函数"></a>javascript高阶函数</h2><ul>
<li>filter: 的回调函数,必须返回一个boolean值,当返回true时,会加入,当返回false时,不会加入数组let newNums = nums.filter(functiong (n){})</li>
<li>map: 对每一数组中的元素使用该函数</li>
<li>reduce: 对数组中所有的内容进行会总reduce(function(preValue, n), prev的初始初始化值),</li>
<li>箭头函数</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>commonjs和SE6模块化开发</title>
    <url>/2021/03/17/%E5%89%8D%E7%AB%AF/Vue/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="SE6模块"><a href="#SE6模块" class="headerlink" title="SE6模块"></a>SE6模块</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"你的模块"</span> <span class="attr">type</span>=<span class="string">module</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在模块导出和导入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> {</span><br><span class="line">	flag, sum</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> num1 = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1, num2</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'+++++'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认导出,自己不命名,让别人命名,默认导出只能有一个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> aaa</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'方法'</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> {flag, sum} <span class="keyword">from</span> <span class="string">"路径"</span></span><br><span class="line"><span class="keyword">import</span> 自己的命名 <span class="keyword">from</span> <span class="string">"路径"</span></span><br><span class="line"><span class="comment">//统一全部导入,aa作为标识</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aa <span class="keyword">from</span> <span class="string">"路径"</span></span><br></pre></td></tr></table></figure>

<p>sum是键</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>组件的使用</title>
    <url>/2021/03/16/%E5%89%8D%E7%AB%AF/Vue/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="创建组件构造器"><a href="#创建组件构造器" class="headerlink" title="创建组件构造器"></a>创建组件构造器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpnC = Vue.extend({	</span><br><span class="line">    template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">				&lt;h2&gt;</span></span><br><span class="line"><span class="string">				&lt;/h2&gt;</span></span><br><span class="line"><span class="string">			&lt;div&gt;`</span></span><br><span class="line">});</span><br></pre></td></tr></table></figure>

<p>`:用在SE6中可以更方便的使用换行,更加直观</p>
<h2 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"组件名"</span>, 组件的变量名)</span><br></pre></td></tr></table></figure>

<p>Vue组件必须放在Vue已经挂载的元素或子元素中</p>
<h2 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h2><ul>
<li>在&lt;script&gt;中注册,为全局组件</li>
<li>在vue中components: {组件名: 组件构造器}</li>
</ul>
<h2 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cpnc2 = Vue.extend({</span><br><span class="line">    template: <span class="string">``</span>,</span><br><span class="line">    components: {</span><br><span class="line">        组件名: 组件构造器</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></table></figure>

<p>el和template是替换关系</p>
<h2 id="注册组件的语法糖"><a href="#注册组件的语法糖" class="headerlink" title="注册组件的语法糖"></a>注册组件的语法糖</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(</span><br><span class="line">	组件名: {</span><br><span class="line">    	template: <span class="string">""</span></span><br><span class="line">    	component: {</span><br><span class="line">    		</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="组件模版抽离的方法"><a href="#组件模版抽离的方法" class="headerlink" title="组件模版抽离的方法"></a>组件模版抽离的方法</h2><ul>
<li>&lt;script type=”type/x-template” id=”cpn”&gt;</li>
<li>&lt;template id=”cpn”&gt;</li>
</ul>
<h2 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data()"></a>组件中的data()</h2><ul>
<li>组件不能访问Vue实例数据,就算被注册了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> {<span class="attr">title</span>:<span class="string">"aaa"</span>}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<ul>
<li>组件也有methods</li>
<li>为什么data必须是函数,实例化多个组件时,是分离的</li>
<li>如果必须要所有的对象都使用同一个值,返回一个在外部的对象,</li>
</ul>
<h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><ul>
<li>父组件-&gt;子组件:pass props<ul>
<li>子组件:props:  [‘属性名1’,’属性名2’]</li>
<li>父组件,v-bind:属性名=”父组件中的变量”</li>
<li>props: {属性名: 类型}</li>
<li>props: {属性名:{type: String, default: “aaaa”,requird: true}}</li>
<li>如若类型时Array和Object,必须把default改为函数,返回相应的类型</li>
</ul>
</li>
<li>props中的驼峰标识,通过:不能写驼峰,可以让-和驼峰配合</li>
<li>&lt;template&gt;必须包含一个根</li>
</ul>
<h2 id="子组件-gt-父组件-emit-event"><a href="#子组件-gt-父组件-emit-event" class="headerlink" title="子组件->父组件:$emit event"></a>子组件-&gt;父组件:$emit event</h2><ul>
<li>子组件:this.$emit(“自定义事件名”,对象)</li>
<li>父组件:@自定义时间名 ,最好别用驼峰</li>
<li>父组件:中的第一个参数默认为现在不是event</li>
<li>将string转化为int,*1和parseInt</li>
<li>watch:监听{属性名(新值,旧值)}</li>
</ul>
<h2 id="父子组件的访问方式"><a href="#父子组件的访问方式" class="headerlink" title="父子组件的访问方式:"></a>父子组件的访问方式:</h2><ul>
<li>父组件访问子组件:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="11.011ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4866.8 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(433, 0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1009, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1354, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1652, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(2172, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2623, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3089, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3966.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">或</text></g></g></g></svg></mjx-container>refs</li>
<li>子组件访问父组件:<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="9.248ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4087.8 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(503, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1032, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1483, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1949, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2549, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(3187.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">或</text></g></g></g></svg></mjx-container>root</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
