<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo文章发布</title>
    <url>/2021/03/11/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Hexo/</url>
    <content><![CDATA[<h1 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h1><ol>
<li>cd 55555Blog</li>
<li>hexo new [-p 路径] 文章的标题</li>
<li>hexo c</li>
<li>hexo g</li>
<li>hexo d</li>
</ol>
<h2 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h2><ul>
<li>文件头的描述信息的：的后面必须有空格</li>
<li>路径的相对位置是source/_post，路径中没有的文件夹将自动创建，最后一个为文件名，会被自动加上.md</li>
<li>第5,6步可联合写成 hexo g -d</li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在html中使用vue</title>
    <url>/2021/03/14/%E5%89%8D%E7%AB%AF/Vue/HelloVuejs%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="Vue-js的导入"><a href="#Vue-js的导入" class="headerlink" title="Vue.js的导入"></a>Vue.js的导入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过js导入vue.js的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"相对该文件的vue.js位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	   	<span class="comment">//在SE6语法中定义变量用const(常量)和let(变量)关键字代替var</span></span></span><br><span class="line"><span class="javascript">       	<span class="comment">//将把id为app的元素挂载到app对象,对div元素中的message进行替换</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: {</span><br><span class="line"><span class="javascript">            	message: <span class="string">"hello world"</span></span></span><br><span class="line">        }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解:</p>
<ul>
<li>html注释:&lt;!– –&gt;</li>
<li>javascript注释://</li>
</ul>
<h2 id="Vue列表的展示"><a href="#Vue列表的展示" class="headerlink" title="Vue列表的展示"></a>Vue列表的展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in movies"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">"相对该文件的vue.js位置"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Aue({</span></span><br><span class="line"><span class="javascript">        	el: <span class="string">"#id"</span>,</span></span><br><span class="line">        	data: {</span><br><span class="line"><span class="javascript">       			movies: [<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>]</span></span><br><span class="line">        	}</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue计数器的展示"><a href="#Vue计数器的展示" class="headerlink" title="Vue计数器的展示"></a>Vue计数器的展示</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前计数: {{counter}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;button v-on:click="counter++"&gt;+&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;button v-on:click="counter&amp;#45;&amp;#45;"&gt;-&lt;/button&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line">        data: {</span><br><span class="line">            counter: 0</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter++;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"add被执行"</span>)</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            sub: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.counter--;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"sub被执行"</span>)</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>@是v-on:的语法糖,也就是简写,</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol>
<li><ul>
<li>Q: 什么时候使用{--{}–},什么时候不使用</li>
<li>在标签的内容中使用,属性里面不能写</li>
</ul>
</li>
<li><ul>
<li>Q: this到底指向的是哪个对象,为什么要使用this </li>
<li>A: this指向的app的对象,使用this还没有创建app对象,需要指定??</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>mustache</title>
    <url>/2021/03/14/%E5%89%8D%E7%AB%AF/Vue/%E6%8F%92%E5%80%BC%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法:"></a>Mustache语法:</h2><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><ul>
<li>可以和属性选择器配合display:none</li>
</ul>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul>
<li><p>属性里面的值变成了变量名</p>
<ul>
<li>如果属性是一个字符串,只能使用这一种方法,不能用{}语法和[]语法,但可以用函数名()返回单个值</li>
<li>只有在vue中挂载了元素,element才能生效</li>
<li>element的span有些奇怪,12应该是变量名,却把他当字符串来看</li>
</ul>
</li>
<li><p>绑定class: </p>
<ul>
<li>{}代表是一个对象,key:value(这里面只能是boolean)</li>
<li>[]里面既可以写’’,也可以写变量名</li>
<li>函数名()可以调用函数</li>
</ul>
</li>
<li><p>绑定style:</p>
<ul>
<li>{}代表是一个对象key(属性名):vlaue(属性值)<ul>
<li>tip:     属性值必须要加单引号,否则当作变量名</li>
<li>变量的值必须带’’,否则又会变成变量名</li>
<li>key既可以用-,也可以用驼峰命名法</li>
</ul>
</li>
<li>[]里面既可以写’’,也可以写变量名<ul>
<li>数组里面只能写变量名,变量只能是对象,</li>
</ul>
</li>
<li>函数名()可以调用函数</li>
</ul>
</li>
<li><p>计算属性: </p>
<ul>
<li><p>函数也可以写在mustache语法中,要带()</p>
</li>
<li><p>computed: {}里定义的也是函数,由于是计算属性,尽量取名词</p>
</li>
<li><p>mustache中计算属性函数不用带()</p>
<ul>
<li><pre><code class="javascript">    for(let i = 0; i &lt; this.books.length; i++)
          result += this.books[i].price;
  return result
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">+ ```javascript</span><br><span class="line">  	for(let i in this.books)</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>获得的是每一个对象的索引</p>
</li>
<li><pre><code class="javascript">    for(let i of this.books)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  获得是每一个对象 </span><br><span class="line"></span><br><span class="line">+ ```javascript</span><br><span class="line">  	computed: {</span><br><span class="line">          fullName: {</span><br><span class="line">              get: function(){</span><br><span class="line">                  </span><br><span class="line">              },</span><br><span class="line">              set: function()</span><br><span class="line">              {</span><br><span class="line">                  </span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>计算属性一般是没有属性的set方法的</p>
</li>
<li><p>字符串实现.split(“ “)</p>
<ul>
<li>计算属性,只调用了一次,对每次的第一次改变进行缓存,它的效率更高</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>let/var</p>
<ul>
<li>var的作用域为全局作用域,就算它在一个代码块之内,例如if和for循环之中,</li>
<li>闭包可以解决var变量为全局变量的情 况</li>
</ul>
</li>
<li><p>const</p>
<ul>
<li>一旦给const赋值后,不能修改</li>
<li>const定义表示标识符后,必须进行赋值</li>
<li>const不能变换指向的对象,可以修改对象的内容</li>
</ul>
</li>
<li><p>SE6的对象增强写法</p>
<ul>
<li><pre><code class="javascript">    const obj = {
        name: 'why',
        age: 18
    }
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 属性的增强写法:如果对象的属性等于变量名可以</span><br><span class="line"></span><br><span class="line">  + ```java</span><br><span class="line">    	const obj = {</span><br><span class="line">            name,</span><br><span class="line">            age,</span><br><span class="line">        }</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>方法的增强写法</p>
<ul>
<li><pre><code class="java">    const obj = {
        getFullName(){

        }
    }</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>v-on:时间监听</p>
<ul>
<li><p>如果方法没有参数,()小括号可省略</p>
</li>
<li><p>如果方法需要一个参数,但监听器确不写(),默认会将event对象传入</p>
</li>
<li><p>方法定义时,需要event对象,同时,又需要其它的参数@click=”aa(123,$event)”</p>
</li>
<li><p>数字是不会被解析成变量名</p>
</li>
<li><p>v-on的修饰符</p>
<ul>
<li>阻止冒泡:@click.stop</li>
<li>阻止默认事件: @click.prevent</li>
<li>特定的键监听: @keyup.enter</li>
<li>自定义组件的监听: @ptn.native</li>
<li>只执行一次: @click.once</li>
</ul>
</li>
</ul>
</li>
<li><p>条件判断:</p>
<ul>
<li>v-if判断组件内的元素是否展示,写基本类型是不会当作变量,而是直接当作值</li>
<li>v-else同级变量之间,兄弟节点</li>
<li>v-else-if同样是同级变量之间</li>
<li>解决复用的方法:在组件后面添加key=”属性值”</li>
<li>v-show: <ul>
<li>与v-if的区别:会v-show是通过display属性来控制的,而v-if根本不会存在dom中</li>
<li>当在显示和隐藏切换很频繁时,使用v-show,如果只有一次切换,通过v-if</li>
</ul>
</li>
</ul>
</li>
<li><p>v-for:</p>
<ul>
<li>v-for=”item in names”;</li>
<li>v-for=”(item, index) in names”数组:小括号意味着元组,</li>
<li>v-for=”item in info”对象,item得到的是value,</li>
<li>v-for=”(value, key) in 对象”,重要的东西放在前面</li>
<li>v-for=”(value,key,index) in 对象”,最后一个是对象属性的索引</li>
<li>官方推荐:使用v-for时推荐使用key,key的值为item</li>
<li>js往数组中插入元素app.letters.splice(索引,要删除的元素的个数,’’元素)</li>
<li>js往数组末尾插入app.letters.push</li>
</ul>
</li>
<li><p>当vue得知vue内的数据发生变化后,会响应的渲染数据,并不是所有的方法能做到响应式,例如直接this.letters[0] = “sdf”,没有对其进行监听,但对this.letters[0].a++又有监听</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift():删除数组的第一个元素</li>
<li>unshift:在数组最前面添加一个或多个元素</li>
<li>splice:如果只有一个元素,删除到末尾,splice(1,2,’a’,’b’),把索引1,2索引的元素替换为”a’’,”b”</li>
<li>sort</li>
<li>reverse</li>
<li>可变参数function sum(…num),num实参的数组的表示符</li>
<li>Vue.set(this.letters,0,”bbbbbb’’)</li>
<li>点击列表,列表变红,每一个li有自己的index</li>
</ul>
</li>
<li><p>引入css&lt;link sytle=”sytle” ref</p>
</li>
<li><p>js文件中直接写代码,不用写&lt;script&gt;</p>
</li>
<li><p>保留两位小数.toFixed,过滤器,实例的filters: “{函数 showPrice(price)},{-{item | showPrice}-} “</p>
</li>
<li><p>js中小于等于&lt;=</p>
</li>
</ul>
<h2 id="javascript高阶函数"><a href="#javascript高阶函数" class="headerlink" title="javascript高阶函数"></a>javascript高阶函数</h2><ul>
<li>filter: 的回调函数,必须返回一个boolean值,当返回true时,会加入,当返回false时,不会加入数组let newNums = nums.filter(functiong (n){})</li>
<li>map: 对每一数组中的元素使用该函数</li>
<li>reduce: 对数组中所有的内容进行会总reduce(function(preValue, n), prev的初始初始化值),</li>
<li>箭头函数</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
